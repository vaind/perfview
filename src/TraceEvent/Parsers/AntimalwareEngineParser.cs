#nullable disable

//<autogenerated/>
using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    internal sealed class MicrosoftAntimalwareEngineTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "Microsoft-Antimalware-Engine";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0x0a002690), unchecked((short) 0x3839), unchecked((short) 0x4e3a), 0xb3, 0xb6, 0x96, 0xd8, 0xdf, 0x86, 0x8d, 0x99);
        public enum Keywords : long
        {
        };

        public MicrosoftAntimalwareEngineTraceEventParser(TraceEventSource source) : base(source) {}

        public event Action<BehaviorMonitoringBmBootRecordChangeArgsTraceData> BehaviorMonitoringBmBootRecordChange
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmBootRecordChangeArgsTraceData(value, 28, 6, "BehaviorMonitoring", Guid.Empty, 30, "BmBootRecordChange", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 28, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmDetectionArgsTraceData> BehaviorMonitoringBmDetection
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmDetectionArgsTraceData(value, 8, 6, "BehaviorMonitoring", Guid.Empty, 10, "BmDetection", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmDocumentOpenArgsTraceData> BehaviorMonitoringBmDocumentOpen
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmDocumentOpenArgsTraceData(value, 12, 6, "BehaviorMonitoring", Guid.Empty, 14, "BmDocumentOpen", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 12, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmDriverLoadArgsTraceData> BehaviorMonitoringBmDriverLoad
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmDriverLoadArgsTraceData(value, 10, 6, "BehaviorMonitoring", Guid.Empty, 12, "BmDriverLoad", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmEtwArgsTraceData> BehaviorMonitoringBmEtw
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmEtwArgsTraceData(value, 60, 6, "BehaviorMonitoring", Guid.Empty, 60, "BmEtw", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmFileCreateArgsTraceData> BehaviorMonitoringBmFileChange
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmFileCreateArgsTraceData(value, 14, 6, "BehaviorMonitoring", Guid.Empty, 16, "BmFileChange", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 14, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmFileCreateArgsTraceData> BehaviorMonitoringBmFileChangeEx
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmFileCreateArgsTraceData(value, 72, 6, "BehaviorMonitoring", Guid.Empty, 70, "BmFileChangeEx", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 72, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmFileCreateArgsTraceData> BehaviorMonitoringBmFileCreate
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmFileCreateArgsTraceData(value, 13, 6, "BehaviorMonitoring", Guid.Empty, 15, "BmFileCreate", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 13, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmFileCreateArgsTraceData> BehaviorMonitoringBmFileCreateEx
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmFileCreateArgsTraceData(value, 71, 6, "BehaviorMonitoring", Guid.Empty, 69, "BmFileCreateEx", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 71, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmFileCreateArgsTraceData> BehaviorMonitoringBmFileDelete
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmFileCreateArgsTraceData(value, 15, 6, "BehaviorMonitoring", Guid.Empty, 17, "BmFileDelete", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 15, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmFileHardLinkArgsTraceData> BehaviorMonitoringBmFileHardLink
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmFileHardLinkArgsTraceData(value, 66, 6, "BehaviorMonitoring", Guid.Empty, 66, "BmFileHardLink", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 66, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmFileRenameArgsTraceData> BehaviorMonitoringBmFileRename
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmFileRenameArgsTraceData(value, 16, 6, "BehaviorMonitoring", Guid.Empty, 18, "BmFileRename", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 16, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmFolderCreateArgsTraceData> BehaviorMonitoringBmFolderCreate
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmFolderCreateArgsTraceData(value, 61, 6, "BehaviorMonitoring", Guid.Empty, 61, "BmFolderCreate", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 61, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmFolderCreateArgsTraceData> BehaviorMonitoringBmFolderEnum
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmFolderCreateArgsTraceData(value, 65, 6, "BehaviorMonitoring", Guid.Empty, 65, "BmFolderEnum", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmFileRenameArgsTraceData> BehaviorMonitoringBmFolderRename
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmFileRenameArgsTraceData(value, 64, 6, "BehaviorMonitoring", Guid.Empty, 64, "BmFolderRename", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 64, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmDriverLoadArgsTraceData> BehaviorMonitoringBmModuleLoad
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmDriverLoadArgsTraceData(value, 11, 6, "BehaviorMonitoring", Guid.Empty, 13, "BmModuleLoad", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmNetworkConnectArgsTraceData> BehaviorMonitoringBmNetworkAccept
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmNetworkConnectArgsTraceData(value, 25, 6, "BehaviorMonitoring", Guid.Empty, 27, "BmNetworkAccept", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 25, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmNetworkConnectArgsTraceData> BehaviorMonitoringBmNetworkConnect
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmNetworkConnectArgsTraceData(value, 22, 6, "BehaviorMonitoring", Guid.Empty, 24, "BmNetworkConnect", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 22, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmNetworkConnectArgsTraceData> BehaviorMonitoringBmNetworkData
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmNetworkConnectArgsTraceData(value, 23, 6, "BehaviorMonitoring", Guid.Empty, 25, "BmNetworkData", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 23, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmNetworkDetectionArgsTraceData> BehaviorMonitoringBmNetworkDetection
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmNetworkDetectionArgsTraceData(value, 27, 6, "BehaviorMonitoring", Guid.Empty, 29, "BmNetworkDetection", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 27, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmNetworkConnectArgsTraceData> BehaviorMonitoringBmNetworkListen
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmNetworkConnectArgsTraceData(value, 24, 6, "BehaviorMonitoring", Guid.Empty, 26, "BmNetworkListen", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 24, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmOpenProcessArgsTraceData> BehaviorMonitoringBmOpenProcess
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmOpenProcessArgsTraceData(value, 53, 6, "BehaviorMonitoring", Guid.Empty, 53, "BmOpenProcess", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 53, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmProcessCreateArgsTraceData> BehaviorMonitoringBmProcessCreate
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmProcessCreateArgsTraceData(value, 70, 6, "BehaviorMonitoring", Guid.Empty, 68, "BmProcessCreate", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 70, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmProcessStartArgsTraceData> BehaviorMonitoringBmProcessStart
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmProcessStartArgsTraceData(value, 9, 6, "BehaviorMonitoring", Guid.Empty, 11, "BmProcessStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmProcessTaintingArgsTraceData> BehaviorMonitoringBmProcessTainting
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmProcessTaintingArgsTraceData(value, 63, 6, "BehaviorMonitoring", Guid.Empty, 63, "BmProcessTainting", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 63, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmNetworkConnectArgsTraceData> BehaviorMonitoringBmProcessTerminate
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmNetworkConnectArgsTraceData(value, 26, 6, "BehaviorMonitoring", Guid.Empty, 28, "BmProcessTerminate", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 26, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> BehaviorMonitoringBmRegistryBlockCreate
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(value, 58, 6, "BehaviorMonitoring", Guid.Empty, 55, "BmRegistryBlockCreate", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 58, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> BehaviorMonitoringBmRegistryBlockDelete
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(value, 47, 6, "BehaviorMonitoring", Guid.Empty, 47, "BmRegistryBlockDelete", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 47, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> BehaviorMonitoringBmRegistryBlockRename
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(value, 48, 6, "BehaviorMonitoring", Guid.Empty, 48, "BmRegistryBlockRename", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 48, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> BehaviorMonitoringBmRegistryBlockReplace
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(value, 51, 6, "BehaviorMonitoring", Guid.Empty, 51, "BmRegistryBlockReplace", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 51, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> BehaviorMonitoringBmRegistryBlockRestore
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(value, 52, 6, "BehaviorMonitoring", Guid.Empty, 52, "BmRegistryBlockRestore", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 52, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> BehaviorMonitoringBmRegistryBlockSet
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(value, 46, 6, "BehaviorMonitoring", Guid.Empty, 46, "BmRegistryBlockSet", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 46, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> BehaviorMonitoringBmRegistryKeyCreate
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(value, 17, 6, "BehaviorMonitoring", Guid.Empty, 19, "BmRegistryKeyCreate", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 17, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> BehaviorMonitoringBmRegistryKeyDelete
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(value, 19, 6, "BehaviorMonitoring", Guid.Empty, 21, "BmRegistryKeyDelete", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 19, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> BehaviorMonitoringBmRegistryKeyRename
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(value, 18, 6, "BehaviorMonitoring", Guid.Empty, 20, "BmRegistryKeyRename", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 18, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> BehaviorMonitoringBmRegistryReplace
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(value, 49, 6, "BehaviorMonitoring", Guid.Empty, 49, "BmRegistryReplace", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 49, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> BehaviorMonitoringBmRegistryRestore
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(value, 50, 6, "BehaviorMonitoring", Guid.Empty, 50, "BmRegistryRestore", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 50, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmRegistryValueSetArgsTraceData> BehaviorMonitoringBmRegistryValueDelete
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmRegistryValueSetArgsTraceData(value, 21, 6, "BehaviorMonitoring", Guid.Empty, 23, "BmRegistryValueDelete", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 21, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmRegistryValueSetArgsTraceData> BehaviorMonitoringBmRegistryValueSet
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmRegistryValueSetArgsTraceData(value, 20, 6, "BehaviorMonitoring", Guid.Empty, 22, "BmRegistryValueSet", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 20, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmRemoteThreadCreateArgsTraceData> BehaviorMonitoringBmRemoteThreadCreate
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmRemoteThreadCreateArgsTraceData(value, 29, 6, "BehaviorMonitoring", Guid.Empty, 31, "BmRemoteThreadCreate", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 29, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringBmScavengerTaskArgsTraceData> BehaviorMonitoringBmScavengerTask
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringBmScavengerTaskArgsTraceData(value, 62, 6, "BehaviorMonitoring", Guid.Empty, 62, "BmScavengerTask", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 62, Guid.Empty);
            }
        }
        public event Action<BehaviorMonitoringProcessMonitorFlagsArgsTraceData> BehaviorMonitoringProcessMonitorFlags
        {
            add
            {
                RegisterTemplate(new BehaviorMonitoringProcessMonitorFlagsArgsTraceData(value, 73, 6, "BehaviorMonitoring", Guid.Empty, 71, "ProcessMonitorFlags", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 73, Guid.Empty);
            }
        }
        public event Action<CacheCacheLookupArgsTraceData> CacheAdd
        {
            add
            {
                RegisterTemplate(new CacheCacheLookupArgsTraceData(value, 39, 7, "Cache", Guid.Empty, 39, "CacheAdd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 39, Guid.Empty);
            }
        }
        public event Action<CacheCacheLookupArgsTraceData> CacheLookup
        {
            add
            {
                RegisterTemplate(new CacheCacheLookupArgsTraceData(value, 38, 7, "Cache", Guid.Empty, 38, "CacheLookup", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 38, Guid.Empty);
            }
        }
        public event Action<CacheMOACAddArgsTraceData> CacheMOACAdd
        {
            add
            {
                RegisterTemplate(new CacheMOACAddArgsTraceData(value, 35, 7, "Cache", Guid.Empty, 34, "MOACAdd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 35, Guid.Empty);
            }
        }
        public event Action<CacheMOACAddArgsTraceData> CacheMOACLookup
        {
            add
            {
                RegisterTemplate(new CacheMOACAddArgsTraceData(value, 36, 7, "Cache", Guid.Empty, 35, "MOACLookup", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 36, Guid.Empty);
            }
        }
        public event Action<CacheMOACAddArgsTraceData> CacheMOACRevoke
        {
            add
            {
                RegisterTemplate(new CacheMOACAddArgsTraceData(value, 37, 7, "Cache", Guid.Empty, 36, "MOACRevoke", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 37, Guid.Empty);
            }
        }
        public event Action<ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData> ExpensiveOperationTaskExpensiveOperationBegin
        {
            add
            {
                RegisterTemplate(new ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData(value, 43, 9, "ExpensiveOperationTask", Guid.Empty, 43, "ExpensiveOperationBegin", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 43, Guid.Empty);
            }
        }
        public event Action<ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData> ExpensiveOperationTaskExpensiveOperationEnd
        {
            add
            {
                RegisterTemplate(new ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData(value, 67, 9, "ExpensiveOperationTask", Guid.Empty, 67, "ExpensiveOperationEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 67, Guid.Empty);
            }
        }
        public event Action<MessageArgsTraceData> Message
        {
            add
            {
                RegisterTemplate(new MessageArgsTraceData(value, 3, 2, "Message", Guid.Empty, 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3, Guid.Empty);
            }
        }
        public event Action<Message59ArgsTraceData> Message59
        {
            add
            {
                RegisterTemplate(new Message59ArgsTraceData(value, 59, 2, "Message", Guid.Empty, 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 59, Guid.Empty);
            }
        }
        public event Action<Message68ArgsTraceData> Message68
        {
            add
            {
                RegisterTemplate(new Message68ArgsTraceData(value, 68, 2, "Message", Guid.Empty, 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 68, Guid.Empty);
            }
        }
        public event Action<Message69ArgsTraceData> Message69
        {
            add
            {
                RegisterTemplate(new Message69ArgsTraceData(value, 69, 2, "Message", Guid.Empty, 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 69, Guid.Empty);
            }
        }
        public event Action<MessageUfsScanStartArgs_V1TraceData> MessageUfsScanStart
        {
            add
            {
                RegisterTemplate(new MessageUfsScanStartArgs_V1TraceData(value, 30, 2, "Message", Guid.Empty, 32, "UfsScanStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 30, Guid.Empty);
            }
        }
        public event Action<MessageUfsScanStart32Args_V1TraceData> MessageUfsScanStart32
        {
            add
            {
                RegisterTemplate(new MessageUfsScanStart32Args_V1TraceData(value, 32, 2, "Message", Guid.Empty, 32, "UfsScanStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 32, Guid.Empty);
            }
        }
        public event Action<MessageUfsScanStartArgs_V1TraceData> MessageUfsScanStop
        {
            add
            {
                RegisterTemplate(new MessageUfsScanStartArgs_V1TraceData(value, 31, 2, "Message", Guid.Empty, 33, "UfsScanStop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 31, Guid.Empty);
            }
        }
        public event Action<MessageUfsScanStart32Args_V1TraceData> MessageUfsScanStop33
        {
            add
            {
                RegisterTemplate(new MessageUfsScanStart32Args_V1TraceData(value, 33, 2, "Message", Guid.Empty, 33, "UfsScanStop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 33, Guid.Empty);
            }
        }
        public event Action<MetaStoreTaskMetaStoreActionArgsTraceData> MetaStoreTaskMetaStoreAction
        {
            add
            {
                RegisterTemplate(new MetaStoreTaskMetaStoreActionArgsTraceData(value, 44, 10, "MetaStoreTask", Guid.Empty, 44, "MetaStoreAction", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 44, Guid.Empty);
            }
        }
        public event Action<MetaStoreTaskMetaStoreMaintenanceArgsTraceData> MetaStoreTaskMetaStoreMaintenance
        {
            add
            {
                RegisterTemplate(new MetaStoreTaskMetaStoreMaintenanceArgsTraceData(value, 45, 10, "MetaStoreTask", Guid.Empty, 45, "MetaStoreMaintenance", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 45, Guid.Empty);
            }
        }
        public event Action<PersistedStoreTaskPersistedStoreActionArgsTraceData> PersistedStoreTaskPersistedStoreAction
        {
            add
            {
                RegisterTemplate(new PersistedStoreTaskPersistedStoreActionArgsTraceData(value, 40, 8, "PersistedStoreTask", Guid.Empty, 40, "PersistedStoreAction", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 40, Guid.Empty);
            }
        }
        public event Action<PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData> PersistedStoreTaskPersistedStoreAnalyzeFile
        {
            add
            {
                RegisterTemplate(new PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData(value, 42, 8, "PersistedStoreTask", Guid.Empty, 42, "PersistedStoreAnalyzeFile", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 42, Guid.Empty);
            }
        }
        public event Action<PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData> PersistedStoreTaskPersistedStoreMaintenance
        {
            add
            {
                RegisterTemplate(new PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData(value, 41, 8, "PersistedStoreTask", Guid.Empty, 41, "PersistedStoreMaintenance", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 41, Guid.Empty);
            }
        }
        public event Action<ScanrequestStartArgs_V1TraceData> ScanrequestStart
        {
            add
            {
                RegisterTemplate(new ScanrequestStartArgs_V1TraceData(value, 1, 1, "Scanrequest", Guid.Empty, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, Guid.Empty);
            }
        }
        public event Action<ScanrequestStartArgs_V1TraceData> ScanrequestStop
        {
            add
            {
                RegisterTemplate(new ScanrequestStartArgs_V1TraceData(value, 2, 1, "Scanrequest", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, Guid.Empty);
            }
        }
        public event Action<SkippedfileArgsTraceData> Skippedfile
        {
            add
            {
                RegisterTemplate(new SkippedfileArgsTraceData(value, 7, 5, "Skippedfile", Guid.Empty, 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7, Guid.Empty);
            }
        }
        public event Action<StreamscanrequestStartArgs_V1TraceData> StreamscanrequestStart
        {
            add
            {
                RegisterTemplate(new StreamscanrequestStartArgs_V1TraceData(value, 5, 4, "Streamscanrequest", Guid.Empty, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5, Guid.Empty);
            }
        }
        public event Action<StreamscanrequestStartArgs_V1TraceData> StreamscanrequestStop
        {
            add
            {
                RegisterTemplate(new StreamscanrequestStartArgs_V1TraceData(value, 6, 4, "Streamscanrequest", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6, Guid.Empty);
            }
        }
        public event Action<VersionsArgsTraceData> Versions
        {
            add
            {
                RegisterTemplate(new VersionsArgsTraceData(value, 4, 3, "Versions", Guid.Empty, 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4, Guid.Empty);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private BehaviorMonitoringBmBootRecordChangeArgsTraceData BehaviorMonitoringBmBootRecordChangeTemplate(Action<BehaviorMonitoringBmBootRecordChangeArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmBootRecordChangeArgsTraceData(action, 28, 6, "BehaviorMonitoring", Guid.Empty, 30, "BmBootRecordChange", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmDetectionArgsTraceData BehaviorMonitoringBmDetectionTemplate(Action<BehaviorMonitoringBmDetectionArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmDetectionArgsTraceData(action, 8, 6, "BehaviorMonitoring", Guid.Empty, 10, "BmDetection", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmDocumentOpenArgsTraceData BehaviorMonitoringBmDocumentOpenTemplate(Action<BehaviorMonitoringBmDocumentOpenArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmDocumentOpenArgsTraceData(action, 12, 6, "BehaviorMonitoring", Guid.Empty, 14, "BmDocumentOpen", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmDriverLoadArgsTraceData BehaviorMonitoringBmDriverLoadTemplate(Action<BehaviorMonitoringBmDriverLoadArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmDriverLoadArgsTraceData(action, 10, 6, "BehaviorMonitoring", Guid.Empty, 12, "BmDriverLoad", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmEtwArgsTraceData BehaviorMonitoringBmEtwTemplate(Action<BehaviorMonitoringBmEtwArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmEtwArgsTraceData(action, 60, 6, "BehaviorMonitoring", Guid.Empty, 60, "BmEtw", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmFileCreateArgsTraceData BehaviorMonitoringBmFileChangeTemplate(Action<BehaviorMonitoringBmFileCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmFileCreateArgsTraceData(action, 14, 6, "BehaviorMonitoring", Guid.Empty, 16, "BmFileChange", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmFileCreateArgsTraceData BehaviorMonitoringBmFileChangeExTemplate(Action<BehaviorMonitoringBmFileCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmFileCreateArgsTraceData(action, 72, 6, "BehaviorMonitoring", Guid.Empty, 70, "BmFileChangeEx", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmFileCreateArgsTraceData BehaviorMonitoringBmFileCreateTemplate(Action<BehaviorMonitoringBmFileCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmFileCreateArgsTraceData(action, 13, 6, "BehaviorMonitoring", Guid.Empty, 15, "BmFileCreate", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmFileCreateArgsTraceData BehaviorMonitoringBmFileCreateExTemplate(Action<BehaviorMonitoringBmFileCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmFileCreateArgsTraceData(action, 71, 6, "BehaviorMonitoring", Guid.Empty, 69, "BmFileCreateEx", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmFileCreateArgsTraceData BehaviorMonitoringBmFileDeleteTemplate(Action<BehaviorMonitoringBmFileCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmFileCreateArgsTraceData(action, 15, 6, "BehaviorMonitoring", Guid.Empty, 17, "BmFileDelete", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmFileHardLinkArgsTraceData BehaviorMonitoringBmFileHardLinkTemplate(Action<BehaviorMonitoringBmFileHardLinkArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmFileHardLinkArgsTraceData(action, 66, 6, "BehaviorMonitoring", Guid.Empty, 66, "BmFileHardLink", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmFileRenameArgsTraceData BehaviorMonitoringBmFileRenameTemplate(Action<BehaviorMonitoringBmFileRenameArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmFileRenameArgsTraceData(action, 16, 6, "BehaviorMonitoring", Guid.Empty, 18, "BmFileRename", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmFolderCreateArgsTraceData BehaviorMonitoringBmFolderCreateTemplate(Action<BehaviorMonitoringBmFolderCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmFolderCreateArgsTraceData(action, 61, 6, "BehaviorMonitoring", Guid.Empty, 61, "BmFolderCreate", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmFolderCreateArgsTraceData BehaviorMonitoringBmFolderEnumTemplate(Action<BehaviorMonitoringBmFolderCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmFolderCreateArgsTraceData(action, 65, 6, "BehaviorMonitoring", Guid.Empty, 65, "BmFolderEnum", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmFileRenameArgsTraceData BehaviorMonitoringBmFolderRenameTemplate(Action<BehaviorMonitoringBmFileRenameArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmFileRenameArgsTraceData(action, 64, 6, "BehaviorMonitoring", Guid.Empty, 64, "BmFolderRename", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmDriverLoadArgsTraceData BehaviorMonitoringBmModuleLoadTemplate(Action<BehaviorMonitoringBmDriverLoadArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmDriverLoadArgsTraceData(action, 11, 6, "BehaviorMonitoring", Guid.Empty, 13, "BmModuleLoad", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmNetworkConnectArgsTraceData BehaviorMonitoringBmNetworkAcceptTemplate(Action<BehaviorMonitoringBmNetworkConnectArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmNetworkConnectArgsTraceData(action, 25, 6, "BehaviorMonitoring", Guid.Empty, 27, "BmNetworkAccept", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmNetworkConnectArgsTraceData BehaviorMonitoringBmNetworkConnectTemplate(Action<BehaviorMonitoringBmNetworkConnectArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmNetworkConnectArgsTraceData(action, 22, 6, "BehaviorMonitoring", Guid.Empty, 24, "BmNetworkConnect", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmNetworkConnectArgsTraceData BehaviorMonitoringBmNetworkDataTemplate(Action<BehaviorMonitoringBmNetworkConnectArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmNetworkConnectArgsTraceData(action, 23, 6, "BehaviorMonitoring", Guid.Empty, 25, "BmNetworkData", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmNetworkDetectionArgsTraceData BehaviorMonitoringBmNetworkDetectionTemplate(Action<BehaviorMonitoringBmNetworkDetectionArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmNetworkDetectionArgsTraceData(action, 27, 6, "BehaviorMonitoring", Guid.Empty, 29, "BmNetworkDetection", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmNetworkConnectArgsTraceData BehaviorMonitoringBmNetworkListenTemplate(Action<BehaviorMonitoringBmNetworkConnectArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmNetworkConnectArgsTraceData(action, 24, 6, "BehaviorMonitoring", Guid.Empty, 26, "BmNetworkListen", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmOpenProcessArgsTraceData BehaviorMonitoringBmOpenProcessTemplate(Action<BehaviorMonitoringBmOpenProcessArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmOpenProcessArgsTraceData(action, 53, 6, "BehaviorMonitoring", Guid.Empty, 53, "BmOpenProcess", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmProcessCreateArgsTraceData BehaviorMonitoringBmProcessCreateTemplate(Action<BehaviorMonitoringBmProcessCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmProcessCreateArgsTraceData(action, 70, 6, "BehaviorMonitoring", Guid.Empty, 68, "BmProcessCreate", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmProcessStartArgsTraceData BehaviorMonitoringBmProcessStartTemplate(Action<BehaviorMonitoringBmProcessStartArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmProcessStartArgsTraceData(action, 9, 6, "BehaviorMonitoring", Guid.Empty, 11, "BmProcessStart", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmProcessTaintingArgsTraceData BehaviorMonitoringBmProcessTaintingTemplate(Action<BehaviorMonitoringBmProcessTaintingArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmProcessTaintingArgsTraceData(action, 63, 6, "BehaviorMonitoring", Guid.Empty, 63, "BmProcessTainting", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmNetworkConnectArgsTraceData BehaviorMonitoringBmProcessTerminateTemplate(Action<BehaviorMonitoringBmNetworkConnectArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmNetworkConnectArgsTraceData(action, 26, 6, "BehaviorMonitoring", Guid.Empty, 28, "BmProcessTerminate", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryBlockCreateTemplate(Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(action, 58, 6, "BehaviorMonitoring", Guid.Empty, 55, "BmRegistryBlockCreate", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryBlockDeleteTemplate(Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(action, 47, 6, "BehaviorMonitoring", Guid.Empty, 47, "BmRegistryBlockDelete", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryBlockRenameTemplate(Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(action, 48, 6, "BehaviorMonitoring", Guid.Empty, 48, "BmRegistryBlockRename", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryBlockReplaceTemplate(Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(action, 51, 6, "BehaviorMonitoring", Guid.Empty, 51, "BmRegistryBlockReplace", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryBlockRestoreTemplate(Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(action, 52, 6, "BehaviorMonitoring", Guid.Empty, 52, "BmRegistryBlockRestore", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryBlockSetTemplate(Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(action, 46, 6, "BehaviorMonitoring", Guid.Empty, 46, "BmRegistryBlockSet", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryKeyCreateTemplate(Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(action, 17, 6, "BehaviorMonitoring", Guid.Empty, 19, "BmRegistryKeyCreate", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryKeyDeleteTemplate(Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(action, 19, 6, "BehaviorMonitoring", Guid.Empty, 21, "BmRegistryKeyDelete", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryKeyRenameTemplate(Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(action, 18, 6, "BehaviorMonitoring", Guid.Empty, 20, "BmRegistryKeyRename", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryReplaceTemplate(Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(action, 49, 6, "BehaviorMonitoring", Guid.Empty, 49, "BmRegistryReplace", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmRegistryKeyCreateArgsTraceData BehaviorMonitoringBmRegistryRestoreTemplate(Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(action, 50, 6, "BehaviorMonitoring", Guid.Empty, 50, "BmRegistryRestore", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmRegistryValueSetArgsTraceData BehaviorMonitoringBmRegistryValueDeleteTemplate(Action<BehaviorMonitoringBmRegistryValueSetArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmRegistryValueSetArgsTraceData(action, 21, 6, "BehaviorMonitoring", Guid.Empty, 23, "BmRegistryValueDelete", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmRegistryValueSetArgsTraceData BehaviorMonitoringBmRegistryValueSetTemplate(Action<BehaviorMonitoringBmRegistryValueSetArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmRegistryValueSetArgsTraceData(action, 20, 6, "BehaviorMonitoring", Guid.Empty, 22, "BmRegistryValueSet", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmRemoteThreadCreateArgsTraceData BehaviorMonitoringBmRemoteThreadCreateTemplate(Action<BehaviorMonitoringBmRemoteThreadCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmRemoteThreadCreateArgsTraceData(action, 29, 6, "BehaviorMonitoring", Guid.Empty, 31, "BmRemoteThreadCreate", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringBmScavengerTaskArgsTraceData BehaviorMonitoringBmScavengerTaskTemplate(Action<BehaviorMonitoringBmScavengerTaskArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringBmScavengerTaskArgsTraceData(action, 62, 6, "BehaviorMonitoring", Guid.Empty, 62, "BmScavengerTask", ProviderGuid, ProviderName );
        }
        static private BehaviorMonitoringProcessMonitorFlagsArgsTraceData BehaviorMonitoringProcessMonitorFlagsTemplate(Action<BehaviorMonitoringProcessMonitorFlagsArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BehaviorMonitoringProcessMonitorFlagsArgsTraceData(action, 73, 6, "BehaviorMonitoring", Guid.Empty, 71, "ProcessMonitorFlags", ProviderGuid, ProviderName );
        }
        static private CacheCacheLookupArgsTraceData CacheAddTemplate(Action<CacheCacheLookupArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CacheCacheLookupArgsTraceData(action, 39, 7, "Cache", Guid.Empty, 39, "CacheAdd", ProviderGuid, ProviderName );
        }
        static private CacheCacheLookupArgsTraceData CacheLookupTemplate(Action<CacheCacheLookupArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CacheCacheLookupArgsTraceData(action, 38, 7, "Cache", Guid.Empty, 38, "CacheLookup", ProviderGuid, ProviderName );
        }
        static private CacheMOACAddArgsTraceData CacheMOACAddTemplate(Action<CacheMOACAddArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CacheMOACAddArgsTraceData(action, 35, 7, "Cache", Guid.Empty, 34, "MOACAdd", ProviderGuid, ProviderName );
        }
        static private CacheMOACAddArgsTraceData CacheMOACLookupTemplate(Action<CacheMOACAddArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CacheMOACAddArgsTraceData(action, 36, 7, "Cache", Guid.Empty, 35, "MOACLookup", ProviderGuid, ProviderName );
        }
        static private CacheMOACAddArgsTraceData CacheMOACRevokeTemplate(Action<CacheMOACAddArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CacheMOACAddArgsTraceData(action, 37, 7, "Cache", Guid.Empty, 36, "MOACRevoke", ProviderGuid, ProviderName );
        }
        static private ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData ExpensiveOperationTaskExpensiveOperationBeginTemplate(Action<ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData(action, 43, 9, "ExpensiveOperationTask", Guid.Empty, 43, "ExpensiveOperationBegin", ProviderGuid, ProviderName );
        }
        static private ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData ExpensiveOperationTaskExpensiveOperationEndTemplate(Action<ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData(action, 67, 9, "ExpensiveOperationTask", Guid.Empty, 67, "ExpensiveOperationEnd", ProviderGuid, ProviderName );
        }
        static private MessageArgsTraceData MessageTemplate(Action<MessageArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MessageArgsTraceData(action, 3, 2, "Message", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Message59ArgsTraceData Message59Template(Action<Message59ArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Message59ArgsTraceData(action, 59, 2, "Message", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Message68ArgsTraceData Message68Template(Action<Message68ArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Message68ArgsTraceData(action, 68, 2, "Message", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Message69ArgsTraceData Message69Template(Action<Message69ArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Message69ArgsTraceData(action, 69, 2, "Message", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private MessageUfsScanStartArgs_V1TraceData MessageUfsScanStartTemplate(Action<MessageUfsScanStartArgs_V1TraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MessageUfsScanStartArgs_V1TraceData(action, 30, 2, "Message", Guid.Empty, 32, "UfsScanStart", ProviderGuid, ProviderName );
        }
        static private MessageUfsScanStart32Args_V1TraceData MessageUfsScanStart32Template(Action<MessageUfsScanStart32Args_V1TraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MessageUfsScanStart32Args_V1TraceData(action, 32, 2, "Message", Guid.Empty, 32, "UfsScanStart", ProviderGuid, ProviderName );
        }
        static private MessageUfsScanStartArgs_V1TraceData MessageUfsScanStopTemplate(Action<MessageUfsScanStartArgs_V1TraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MessageUfsScanStartArgs_V1TraceData(action, 31, 2, "Message", Guid.Empty, 33, "UfsScanStop", ProviderGuid, ProviderName );
        }
        static private MessageUfsScanStart32Args_V1TraceData MessageUfsScanStop33Template(Action<MessageUfsScanStart32Args_V1TraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MessageUfsScanStart32Args_V1TraceData(action, 33, 2, "Message", Guid.Empty, 33, "UfsScanStop", ProviderGuid, ProviderName );
        }
        static private MetaStoreTaskMetaStoreActionArgsTraceData MetaStoreTaskMetaStoreActionTemplate(Action<MetaStoreTaskMetaStoreActionArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MetaStoreTaskMetaStoreActionArgsTraceData(action, 44, 10, "MetaStoreTask", Guid.Empty, 44, "MetaStoreAction", ProviderGuid, ProviderName );
        }
        static private MetaStoreTaskMetaStoreMaintenanceArgsTraceData MetaStoreTaskMetaStoreMaintenanceTemplate(Action<MetaStoreTaskMetaStoreMaintenanceArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MetaStoreTaskMetaStoreMaintenanceArgsTraceData(action, 45, 10, "MetaStoreTask", Guid.Empty, 45, "MetaStoreMaintenance", ProviderGuid, ProviderName );
        }
        static private PersistedStoreTaskPersistedStoreActionArgsTraceData PersistedStoreTaskPersistedStoreActionTemplate(Action<PersistedStoreTaskPersistedStoreActionArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PersistedStoreTaskPersistedStoreActionArgsTraceData(action, 40, 8, "PersistedStoreTask", Guid.Empty, 40, "PersistedStoreAction", ProviderGuid, ProviderName );
        }
        static private PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData PersistedStoreTaskPersistedStoreAnalyzeFileTemplate(Action<PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData(action, 42, 8, "PersistedStoreTask", Guid.Empty, 42, "PersistedStoreAnalyzeFile", ProviderGuid, ProviderName );
        }
        static private PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData PersistedStoreTaskPersistedStoreMaintenanceTemplate(Action<PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData(action, 41, 8, "PersistedStoreTask", Guid.Empty, 41, "PersistedStoreMaintenance", ProviderGuid, ProviderName );
        }
        static private ScanrequestStartArgs_V1TraceData ScanrequestStartTemplate(Action<ScanrequestStartArgs_V1TraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ScanrequestStartArgs_V1TraceData(action, 1, 1, "Scanrequest", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private ScanrequestStartArgs_V1TraceData ScanrequestStopTemplate(Action<ScanrequestStartArgs_V1TraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ScanrequestStartArgs_V1TraceData(action, 2, 1, "Scanrequest", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private SkippedfileArgsTraceData SkippedfileTemplate(Action<SkippedfileArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SkippedfileArgsTraceData(action, 7, 5, "Skippedfile", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private StreamscanrequestStartArgs_V1TraceData StreamscanrequestStartTemplate(Action<StreamscanrequestStartArgs_V1TraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new StreamscanrequestStartArgs_V1TraceData(action, 5, 4, "Streamscanrequest", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private StreamscanrequestStartArgs_V1TraceData StreamscanrequestStopTemplate(Action<StreamscanrequestStartArgs_V1TraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new StreamscanrequestStartArgs_V1TraceData(action, 6, 4, "Streamscanrequest", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private VersionsArgsTraceData VersionsTemplate(Action<VersionsArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VersionsArgsTraceData(action, 4, 3, "Versions", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }

        static private volatile TraceEvent[] s_templates;
        protected internal override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[68];
                templates[0] = new ScanrequestStartArgs_V1TraceData(null, 1, 1, "Scanrequest", Guid.Empty, 1, "Start", ProviderGuid, ProviderName);
                templates[1] = new ScanrequestStartArgs_V1TraceData(null, 2, 1, "Scanrequest", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName);
                templates[2] = new MessageArgsTraceData(null, 3, 2, "Message", Guid.Empty, 0, "", ProviderGuid, ProviderName);
                templates[3] = new VersionsArgsTraceData(null, 4, 3, "Versions", Guid.Empty, 0, "", ProviderGuid, ProviderName);
                templates[4] = new StreamscanrequestStartArgs_V1TraceData(null, 5, 4, "Streamscanrequest", Guid.Empty, 1, "Start", ProviderGuid, ProviderName);
                templates[5] = new StreamscanrequestStartArgs_V1TraceData(null, 6, 4, "Streamscanrequest", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName);
                templates[6] = new SkippedfileArgsTraceData(null, 7, 5, "Skippedfile", Guid.Empty, 0, "", ProviderGuid, ProviderName);
                templates[7] = new BehaviorMonitoringBmDetectionArgsTraceData(null, 8, 6, "BehaviorMonitoring", Guid.Empty, 10, "BmDetection", ProviderGuid, ProviderName);
                templates[8] = new BehaviorMonitoringBmProcessStartArgsTraceData(null, 9, 6, "BehaviorMonitoring", Guid.Empty, 11, "BmProcessStart", ProviderGuid, ProviderName);
                templates[9] = new BehaviorMonitoringBmDriverLoadArgsTraceData(null, 10, 6, "BehaviorMonitoring", Guid.Empty, 12, "BmDriverLoad", ProviderGuid, ProviderName);
                templates[10] = new BehaviorMonitoringBmDriverLoadArgsTraceData(null, 11, 6, "BehaviorMonitoring", Guid.Empty, 13, "BmModuleLoad", ProviderGuid, ProviderName);
                templates[11] = new BehaviorMonitoringBmDocumentOpenArgsTraceData(null, 12, 6, "BehaviorMonitoring", Guid.Empty, 14, "BmDocumentOpen", ProviderGuid, ProviderName);
                templates[12] = new BehaviorMonitoringBmFileCreateArgsTraceData(null, 13, 6, "BehaviorMonitoring", Guid.Empty, 15, "BmFileCreate", ProviderGuid, ProviderName);
                templates[13] = new BehaviorMonitoringBmFileCreateArgsTraceData(null, 14, 6, "BehaviorMonitoring", Guid.Empty, 16, "BmFileChange", ProviderGuid, ProviderName);
                templates[14] = new BehaviorMonitoringBmFileCreateArgsTraceData(null, 15, 6, "BehaviorMonitoring", Guid.Empty, 17, "BmFileDelete", ProviderGuid, ProviderName);
                templates[15] = new BehaviorMonitoringBmFileRenameArgsTraceData(null, 16, 6, "BehaviorMonitoring", Guid.Empty, 18, "BmFileRename", ProviderGuid, ProviderName);
                templates[16] = new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(null, 17, 6, "BehaviorMonitoring", Guid.Empty, 19, "BmRegistryKeyCreate", ProviderGuid, ProviderName);
                templates[17] = new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(null, 18, 6, "BehaviorMonitoring", Guid.Empty, 20, "BmRegistryKeyRename", ProviderGuid, ProviderName);
                templates[18] = new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(null, 19, 6, "BehaviorMonitoring", Guid.Empty, 21, "BmRegistryKeyDelete", ProviderGuid, ProviderName);
                templates[19] = new BehaviorMonitoringBmRegistryValueSetArgsTraceData(null, 20, 6, "BehaviorMonitoring", Guid.Empty, 22, "BmRegistryValueSet", ProviderGuid, ProviderName);
                templates[20] = new BehaviorMonitoringBmRegistryValueSetArgsTraceData(null, 21, 6, "BehaviorMonitoring", Guid.Empty, 23, "BmRegistryValueDelete", ProviderGuid, ProviderName);
                templates[21] = new BehaviorMonitoringBmNetworkConnectArgsTraceData(null, 22, 6, "BehaviorMonitoring", Guid.Empty, 24, "BmNetworkConnect", ProviderGuid, ProviderName);
                templates[22] = new BehaviorMonitoringBmNetworkConnectArgsTraceData(null, 23, 6, "BehaviorMonitoring", Guid.Empty, 25, "BmNetworkData", ProviderGuid, ProviderName);
                templates[23] = new BehaviorMonitoringBmNetworkConnectArgsTraceData(null, 24, 6, "BehaviorMonitoring", Guid.Empty, 26, "BmNetworkListen", ProviderGuid, ProviderName);
                templates[24] = new BehaviorMonitoringBmNetworkConnectArgsTraceData(null, 25, 6, "BehaviorMonitoring", Guid.Empty, 27, "BmNetworkAccept", ProviderGuid, ProviderName);
                templates[25] = new BehaviorMonitoringBmNetworkConnectArgsTraceData(null, 26, 6, "BehaviorMonitoring", Guid.Empty, 28, "BmProcessTerminate", ProviderGuid, ProviderName);
                templates[26] = new BehaviorMonitoringBmNetworkDetectionArgsTraceData(null, 27, 6, "BehaviorMonitoring", Guid.Empty, 29, "BmNetworkDetection", ProviderGuid, ProviderName);
                templates[27] = new BehaviorMonitoringBmBootRecordChangeArgsTraceData(null, 28, 6, "BehaviorMonitoring", Guid.Empty, 30, "BmBootRecordChange", ProviderGuid, ProviderName);
                templates[28] = new BehaviorMonitoringBmRemoteThreadCreateArgsTraceData(null, 29, 6, "BehaviorMonitoring", Guid.Empty, 31, "BmRemoteThreadCreate", ProviderGuid, ProviderName);
                templates[29] = new MessageUfsScanStartArgs_V1TraceData(null, 30, 2, "Message", Guid.Empty, 32, "UfsScanStart", ProviderGuid, ProviderName);
                templates[30] = new MessageUfsScanStartArgs_V1TraceData(null, 31, 2, "Message", Guid.Empty, 33, "UfsScanStop", ProviderGuid, ProviderName);
                templates[31] = new MessageUfsScanStart32Args_V1TraceData(null, 32, 2, "Message", Guid.Empty, 32, "UfsScanStart", ProviderGuid, ProviderName);
                templates[32] = new MessageUfsScanStart32Args_V1TraceData(null, 33, 2, "Message", Guid.Empty, 33, "UfsScanStop", ProviderGuid, ProviderName);
                templates[33] = new CacheMOACAddArgsTraceData(null, 35, 7, "Cache", Guid.Empty, 34, "MOACAdd", ProviderGuid, ProviderName);
                templates[34] = new CacheMOACAddArgsTraceData(null, 36, 7, "Cache", Guid.Empty, 35, "MOACLookup", ProviderGuid, ProviderName);
                templates[35] = new CacheMOACAddArgsTraceData(null, 37, 7, "Cache", Guid.Empty, 36, "MOACRevoke", ProviderGuid, ProviderName);
                templates[36] = new CacheCacheLookupArgsTraceData(null, 38, 7, "Cache", Guid.Empty, 38, "CacheLookup", ProviderGuid, ProviderName);
                templates[37] = new CacheCacheLookupArgsTraceData(null, 39, 7, "Cache", Guid.Empty, 39, "CacheAdd", ProviderGuid, ProviderName);
                templates[38] = new PersistedStoreTaskPersistedStoreActionArgsTraceData(null, 40, 8, "PersistedStoreTask", Guid.Empty, 40, "PersistedStoreAction", ProviderGuid, ProviderName);
                templates[39] = new PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData(null, 41, 8, "PersistedStoreTask", Guid.Empty, 41, "PersistedStoreMaintenance", ProviderGuid, ProviderName);
                templates[40] = new PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData(null, 42, 8, "PersistedStoreTask", Guid.Empty, 42, "PersistedStoreAnalyzeFile", ProviderGuid, ProviderName);
                templates[41] = new ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData(null, 43, 9, "ExpensiveOperationTask", Guid.Empty, 43, "ExpensiveOperationBegin", ProviderGuid, ProviderName);
                templates[42] = new MetaStoreTaskMetaStoreActionArgsTraceData(null, 44, 10, "MetaStoreTask", Guid.Empty, 44, "MetaStoreAction", ProviderGuid, ProviderName);
                templates[43] = new MetaStoreTaskMetaStoreMaintenanceArgsTraceData(null, 45, 10, "MetaStoreTask", Guid.Empty, 45, "MetaStoreMaintenance", ProviderGuid, ProviderName);
                templates[44] = new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(null, 46, 6, "BehaviorMonitoring", Guid.Empty, 46, "BmRegistryBlockSet", ProviderGuid, ProviderName);
                templates[45] = new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(null, 47, 6, "BehaviorMonitoring", Guid.Empty, 47, "BmRegistryBlockDelete", ProviderGuid, ProviderName);
                templates[46] = new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(null, 48, 6, "BehaviorMonitoring", Guid.Empty, 48, "BmRegistryBlockRename", ProviderGuid, ProviderName);
                templates[47] = new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(null, 49, 6, "BehaviorMonitoring", Guid.Empty, 49, "BmRegistryReplace", ProviderGuid, ProviderName);
                templates[48] = new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(null, 50, 6, "BehaviorMonitoring", Guid.Empty, 50, "BmRegistryRestore", ProviderGuid, ProviderName);
                templates[49] = new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(null, 51, 6, "BehaviorMonitoring", Guid.Empty, 51, "BmRegistryBlockReplace", ProviderGuid, ProviderName);
                templates[50] = new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(null, 52, 6, "BehaviorMonitoring", Guid.Empty, 52, "BmRegistryBlockRestore", ProviderGuid, ProviderName);
                templates[51] = new BehaviorMonitoringBmOpenProcessArgsTraceData(null, 53, 6, "BehaviorMonitoring", Guid.Empty, 53, "BmOpenProcess", ProviderGuid, ProviderName);
                templates[52] = new BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(null, 58, 6, "BehaviorMonitoring", Guid.Empty, 55, "BmRegistryBlockCreate", ProviderGuid, ProviderName);
                templates[53] = new MessageArgsTraceData(null, 59, 2, "Message", Guid.Empty, 0, "", ProviderGuid, ProviderName);
                templates[54] = new BehaviorMonitoringBmEtwArgsTraceData(null, 60, 6, "BehaviorMonitoring", Guid.Empty, 60, "BmEtw", ProviderGuid, ProviderName);
                templates[55] = new BehaviorMonitoringBmFolderCreateArgsTraceData(null, 61, 6, "BehaviorMonitoring", Guid.Empty, 61, "BmFolderCreate", ProviderGuid, ProviderName);
                templates[56] = new BehaviorMonitoringBmScavengerTaskArgsTraceData(null, 62, 6, "BehaviorMonitoring", Guid.Empty, 62, "BmScavengerTask", ProviderGuid, ProviderName);
                templates[57] = new BehaviorMonitoringBmProcessTaintingArgsTraceData(null, 63, 6, "BehaviorMonitoring", Guid.Empty, 63, "BmProcessTainting", ProviderGuid, ProviderName);
                templates[58] = new BehaviorMonitoringBmFileRenameArgsTraceData(null, 64, 6, "BehaviorMonitoring", Guid.Empty, 64, "BmFolderRename", ProviderGuid, ProviderName);
                templates[59] = new BehaviorMonitoringBmFolderCreateArgsTraceData(null, 65, 6, "BehaviorMonitoring", Guid.Empty, 65, "BmFolderEnum", ProviderGuid, ProviderName);
                templates[60] = new BehaviorMonitoringBmFileHardLinkArgsTraceData(null, 66, 6, "BehaviorMonitoring", Guid.Empty, 66, "BmFileHardLink", ProviderGuid, ProviderName);
                templates[61] = new ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData(null, 67, 9, "ExpensiveOperationTask", Guid.Empty, 67, "ExpensiveOperationEnd", ProviderGuid, ProviderName);
                templates[62] = new MessageArgsTraceData(null, 68, 2, "Message", Guid.Empty, 0, "", ProviderGuid, ProviderName);
                templates[63] = new MessageArgsTraceData(null, 69, 2, "Message", Guid.Empty, 0, "", ProviderGuid, ProviderName);
                templates[64] = new BehaviorMonitoringBmProcessCreateArgsTraceData(null, 70, 6, "BehaviorMonitoring", Guid.Empty, 68, "BmProcessCreate", ProviderGuid, ProviderName);
                templates[65] = new BehaviorMonitoringBmFileCreateArgsTraceData(null, 71, 6, "BehaviorMonitoring", Guid.Empty, 69, "BmFileCreateEx", ProviderGuid, ProviderName);
                templates[66] = new BehaviorMonitoringBmFileCreateArgsTraceData(null, 72, 6, "BehaviorMonitoring", Guid.Empty, 70, "BmFileChangeEx", ProviderGuid, ProviderName);
                templates[67] = new BehaviorMonitoringProcessMonitorFlagsArgsTraceData(null, 73, 6, "BehaviorMonitoring", Guid.Empty, 71, "ProcessMonitorFlags", ProviderGuid, ProviderName);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        private void RegisterTemplate(TraceEvent template)
        {
            Debug.Assert(template.ProviderGuid == MicrosoftAntimalwareEngineTraceEventParser.ProviderGuid);
            source.RegisterEventTemplate(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareEngine
{
    internal sealed class BehaviorMonitoringBmBootRecordChangeArgsTraceData : TraceEvent
    {
        public int PID { get { return GetInt32At(0); } }
        public int RecordType { get { return GetInt32At(4); } }
        public string ImagePath { get { return GetUnicodeStringAt(8); } }
        public string Path { get { return GetUnicodeStringAt(SkipUnicodeString(8)); } }

        #region Private
        internal BehaviorMonitoringBmBootRecordChangeArgsTraceData(Action<BehaviorMonitoringBmBootRecordChangeArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(8))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(8))));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<BehaviorMonitoringBmBootRecordChangeArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PID", PID);
             XmlAttrib(sb, "RecordType", RecordType);
             XmlAttrib(sb, "ImagePath", ImagePath);
             XmlAttrib(sb, "Path", Path);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PID", "RecordType", "ImagePath", "Path"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PID;
                case 1:
                    return RecordType;
                case 2:
                    return ImagePath;
                case 3:
                    return Path;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<BehaviorMonitoringBmBootRecordChangeArgsTraceData> Action;
        #endregion
    }
    internal sealed class BehaviorMonitoringBmDetectionArgsTraceData : TraceEvent
    {
        public int PID { get { return GetInt32At(0); } }
        public Guid GUID { get { return GetGuidAt(4); } }
        public int Type { get { return GetInt32At(20); } }
        public string Name { get { return GetUnicodeStringAt(24); } }
        public long SignatureId { get { return GetInt64At(SkipUnicodeString(24)); } }
        public string ImagePath { get { return GetUnicodeStringAt(SkipUnicodeString(24)+8); } }

        #region Private
        internal BehaviorMonitoringBmDetectionArgsTraceData(Action<BehaviorMonitoringBmDetectionArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(24)+8)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(24)+8)));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<BehaviorMonitoringBmDetectionArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PID", PID);
             XmlAttrib(sb, "GUID", GUID);
             XmlAttrib(sb, "Type", Type);
             XmlAttrib(sb, "Name", Name);
             XmlAttrib(sb, "SignatureId", SignatureId);
             XmlAttrib(sb, "ImagePath", ImagePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PID", "GUID", "Type", "Name", "SignatureId", "ImagePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PID;
                case 1:
                    return GUID;
                case 2:
                    return Type;
                case 3:
                    return Name;
                case 4:
                    return SignatureId;
                case 5:
                    return ImagePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<BehaviorMonitoringBmDetectionArgsTraceData> Action;
        #endregion
    }
    internal sealed class BehaviorMonitoringBmDocumentOpenArgsTraceData : TraceEvent
    {
        public int PID { get { return GetInt32At(0); } }
        public string ImageName { get { return GetUnicodeStringAt(4); } }
        public string FileName { get { return GetUnicodeStringAt(SkipUnicodeString(4)); } }

        #region Private
        internal BehaviorMonitoringBmDocumentOpenArgsTraceData(Action<BehaviorMonitoringBmDocumentOpenArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(4))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(4))));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<BehaviorMonitoringBmDocumentOpenArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PID", PID);
             XmlAttrib(sb, "ImageName", ImageName);
             XmlAttrib(sb, "FileName", FileName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PID", "ImageName", "FileName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PID;
                case 1:
                    return ImageName;
                case 2:
                    return FileName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<BehaviorMonitoringBmDocumentOpenArgsTraceData> Action;
        #endregion
    }
    internal sealed class BehaviorMonitoringBmDriverLoadArgsTraceData : TraceEvent
    {
        public int PID { get { return GetInt32At(0); } }
        public string ImagePath { get { return GetUnicodeStringAt(4); } }

        #region Private
        internal BehaviorMonitoringBmDriverLoadArgsTraceData(Action<BehaviorMonitoringBmDriverLoadArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(4)));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<BehaviorMonitoringBmDriverLoadArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PID", PID);
             XmlAttrib(sb, "ImagePath", ImagePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PID", "ImagePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PID;
                case 1:
                    return ImagePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<BehaviorMonitoringBmDriverLoadArgsTraceData> Action;
        #endregion
    }
    internal sealed class BehaviorMonitoringBmEtwArgsTraceData : TraceEvent
    {
        public int PID { get { return GetInt32At(0); } }
        public string PayloadChannel { get { return GetUnicodeStringAt(4); } }
        public int EventId { get { return GetInt32At(SkipUnicodeString(4)); } }

        #region Private
        internal BehaviorMonitoringBmEtwArgsTraceData(Action<BehaviorMonitoringBmEtwArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(4)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(4)+4));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<BehaviorMonitoringBmEtwArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PID", PID);
             XmlAttrib(sb, "Channel", Channel);
             XmlAttrib(sb, "EventId", EventId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PID", "Channel", "EventId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PID;
                case 1:
                    return Channel;
                case 2:
                    return EventId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<BehaviorMonitoringBmEtwArgsTraceData> Action;
        #endregion
    }
    internal sealed class BehaviorMonitoringBmFileCreateArgsTraceData : TraceEvent
    {
        public int PID { get { return GetInt32At(0); } }
        public string FileName { get { return GetUnicodeStringAt(4); } }

        #region Private
        internal BehaviorMonitoringBmFileCreateArgsTraceData(Action<BehaviorMonitoringBmFileCreateArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(4)));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<BehaviorMonitoringBmFileCreateArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PID", PID);
             XmlAttrib(sb, "FileName", FileName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PID", "FileName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PID;
                case 1:
                    return FileName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<BehaviorMonitoringBmFileCreateArgsTraceData> Action;
        #endregion
    }
    internal sealed class BehaviorMonitoringBmFileHardLinkArgsTraceData : TraceEvent
    {
        public int PID { get { return GetInt32At(0); } }
        public string FileName { get { return GetUnicodeStringAt(4); } }
        public string FileHardLinkName { get { return GetUnicodeStringAt(SkipUnicodeString(4)); } }

        #region Private
        internal BehaviorMonitoringBmFileHardLinkArgsTraceData(Action<BehaviorMonitoringBmFileHardLinkArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(4))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(4))));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<BehaviorMonitoringBmFileHardLinkArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PID", PID);
             XmlAttrib(sb, "FileName", FileName);
             XmlAttrib(sb, "FileHardLinkName", FileHardLinkName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PID", "FileName", "FileHardLinkName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PID;
                case 1:
                    return FileName;
                case 2:
                    return FileHardLinkName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<BehaviorMonitoringBmFileHardLinkArgsTraceData> Action;
        #endregion
    }
    internal sealed class BehaviorMonitoringBmFileRenameArgsTraceData : TraceEvent
    {
        public int PID { get { return GetInt32At(0); } }
        public string FileName { get { return GetUnicodeStringAt(4); } }
        public string OldFileName { get { return GetUnicodeStringAt(SkipUnicodeString(4)); } }

        #region Private
        internal BehaviorMonitoringBmFileRenameArgsTraceData(Action<BehaviorMonitoringBmFileRenameArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(4))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(4))));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<BehaviorMonitoringBmFileRenameArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PID", PID);
             XmlAttrib(sb, "FileName", FileName);
             XmlAttrib(sb, "OldFileName", OldFileName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PID", "FileName", "OldFileName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PID;
                case 1:
                    return FileName;
                case 2:
                    return OldFileName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<BehaviorMonitoringBmFileRenameArgsTraceData> Action;
        #endregion
    }
    internal sealed class BehaviorMonitoringBmFolderCreateArgsTraceData : TraceEvent
    {
        public int PID { get { return GetInt32At(0); } }
        public string FolderName { get { return GetUnicodeStringAt(4); } }

        #region Private
        internal BehaviorMonitoringBmFolderCreateArgsTraceData(Action<BehaviorMonitoringBmFolderCreateArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(4)));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<BehaviorMonitoringBmFolderCreateArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PID", PID);
             XmlAttrib(sb, "FolderName", FolderName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PID", "FolderName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PID;
                case 1:
                    return FolderName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<BehaviorMonitoringBmFolderCreateArgsTraceData> Action;
        #endregion
    }
    internal sealed class BehaviorMonitoringBmNetworkConnectArgsTraceData : TraceEvent
    {
        public int PID { get { return GetInt32At(0); } }

        #region Private
        internal BehaviorMonitoringBmNetworkConnectArgsTraceData(Action<BehaviorMonitoringBmNetworkConnectArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<BehaviorMonitoringBmNetworkConnectArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PID", PID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<BehaviorMonitoringBmNetworkConnectArgsTraceData> Action;
        #endregion
    }
    internal sealed class BehaviorMonitoringBmNetworkDetectionArgsTraceData : TraceEvent
    {
        public int PID { get { return GetInt32At(0); } }
        public long DetectionId { get { return GetInt64At(4); } }

        #region Private
        internal BehaviorMonitoringBmNetworkDetectionArgsTraceData(Action<BehaviorMonitoringBmNetworkDetectionArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<BehaviorMonitoringBmNetworkDetectionArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PID", PID);
             XmlAttrib(sb, "DetectionId", DetectionId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PID", "DetectionId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PID;
                case 1:
                    return DetectionId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<BehaviorMonitoringBmNetworkDetectionArgsTraceData> Action;
        #endregion
    }
    internal sealed class BehaviorMonitoringBmOpenProcessArgsTraceData : TraceEvent
    {
        public int PID { get { return GetInt32At(0); } }
        public int TargetPID { get { return GetInt32At(4); } }
        public int AccessMask { get { return GetInt32At(8); } }
        public bool WasHardened { get { return GetInt32At(12) != 0; } }

        #region Private
        internal BehaviorMonitoringBmOpenProcessArgsTraceData(Action<BehaviorMonitoringBmOpenProcessArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<BehaviorMonitoringBmOpenProcessArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PID", PID);
             XmlAttrib(sb, "TargetPID", TargetPID);
             XmlAttrib(sb, "AccessMask", AccessMask);
             XmlAttrib(sb, "WasHardened", WasHardened);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PID", "TargetPID", "AccessMask", "WasHardened"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PID;
                case 1:
                    return TargetPID;
                case 2:
                    return AccessMask;
                case 3:
                    return WasHardened;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<BehaviorMonitoringBmOpenProcessArgsTraceData> Action;
        #endregion
    }
    internal sealed class BehaviorMonitoringBmProcessCreateArgsTraceData : TraceEvent
    {
        public string BasePath { get { return GetUnicodeStringAt(0); } }
        public string CommandLine { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int PID { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public int ParentPID { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+4); } }
        public int Flags { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+8); } }
        public int IntegrityLevel { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+12); } }

        #region Private
        internal BehaviorMonitoringBmProcessCreateArgsTraceData(Action<BehaviorMonitoringBmProcessCreateArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+16));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+16));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<BehaviorMonitoringBmProcessCreateArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "BasePath", BasePath);
             XmlAttrib(sb, "CommandLine", CommandLine);
             XmlAttrib(sb, "PID", PID);
             XmlAttrib(sb, "ParentPID", ParentPID);
             XmlAttrib(sb, "Flags", Flags);
             XmlAttrib(sb, "IntegrityLevel", IntegrityLevel);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BasePath", "CommandLine", "PID", "ParentPID", "Flags", "IntegrityLevel"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return BasePath;
                case 1:
                    return CommandLine;
                case 2:
                    return PID;
                case 3:
                    return ParentPID;
                case 4:
                    return Flags;
                case 5:
                    return IntegrityLevel;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<BehaviorMonitoringBmProcessCreateArgsTraceData> Action;
        #endregion
    }
    internal sealed class BehaviorMonitoringBmProcessStartArgsTraceData : TraceEvent
    {
        public int PID { get { return GetInt32At(0); } }
        public int PPID { get { return GetInt32At(4); } }
        public string ImagePath { get { return GetUnicodeStringAt(8); } }
        public int Flags { get { return GetInt32At(SkipUnicodeString(8)); } }

        #region Private
        internal BehaviorMonitoringBmProcessStartArgsTraceData(Action<BehaviorMonitoringBmProcessStartArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(8)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(8)+4));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<BehaviorMonitoringBmProcessStartArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PID", PID);
             XmlAttrib(sb, "PPID", PPID);
             XmlAttrib(sb, "ImagePath", ImagePath);
             XmlAttrib(sb, "Flags", Flags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PID", "PPID", "ImagePath", "Flags"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PID;
                case 1:
                    return PPID;
                case 2:
                    return ImagePath;
                case 3:
                    return Flags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<BehaviorMonitoringBmProcessStartArgsTraceData> Action;
        #endregion
    }
    internal sealed class BehaviorMonitoringBmProcessTaintingArgsTraceData : TraceEvent
    {
        public long TaintReason { get { return GetInt64At(0); } }
        public string ReasonImagePath { get { return GetUnicodeStringAt(8); } }
        public string ProcessImagePath { get { return GetUnicodeStringAt(SkipUnicodeString(8)); } }

        #region Private
        internal BehaviorMonitoringBmProcessTaintingArgsTraceData(Action<BehaviorMonitoringBmProcessTaintingArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(8))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(8))));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<BehaviorMonitoringBmProcessTaintingArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TaintReason", TaintReason);
             XmlAttrib(sb, "ReasonImagePath", ReasonImagePath);
             XmlAttrib(sb, "ProcessImagePath", ProcessImagePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TaintReason", "ReasonImagePath", "ProcessImagePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TaintReason;
                case 1:
                    return ReasonImagePath;
                case 2:
                    return ProcessImagePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<BehaviorMonitoringBmProcessTaintingArgsTraceData> Action;
        #endregion
    }
    internal sealed class BehaviorMonitoringBmRegistryKeyCreateArgsTraceData : TraceEvent
    {
        public int PID { get { return GetInt32At(0); } }
        public string KeyPath { get { return GetUnicodeStringAt(4); } }

        #region Private
        internal BehaviorMonitoringBmRegistryKeyCreateArgsTraceData(Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(4)));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PID", PID);
             XmlAttrib(sb, "KeyPath", KeyPath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PID", "KeyPath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PID;
                case 1:
                    return KeyPath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<BehaviorMonitoringBmRegistryKeyCreateArgsTraceData> Action;
        #endregion
    }
    internal sealed class BehaviorMonitoringBmRegistryValueSetArgsTraceData : TraceEvent
    {
        public int PID { get { return GetInt32At(0); } }
        public string KeyPath { get { return GetUnicodeStringAt(4); } }
        public string ValueName { get { return GetUnicodeStringAt(SkipUnicodeString(4)); } }

        #region Private
        internal BehaviorMonitoringBmRegistryValueSetArgsTraceData(Action<BehaviorMonitoringBmRegistryValueSetArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(4))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(4))));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<BehaviorMonitoringBmRegistryValueSetArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PID", PID);
             XmlAttrib(sb, "KeyPath", KeyPath);
             XmlAttrib(sb, "ValueName", ValueName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PID", "KeyPath", "ValueName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PID;
                case 1:
                    return KeyPath;
                case 2:
                    return ValueName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<BehaviorMonitoringBmRegistryValueSetArgsTraceData> Action;
        #endregion
    }
    internal sealed class BehaviorMonitoringBmRemoteThreadCreateArgsTraceData : TraceEvent
    {
        public int PID { get { return GetInt32At(0); } }
        public int TPID { get { return GetInt32At(4); } }
        public int TTID { get { return GetInt32At(8); } }
        public string ImageName { get { return GetUnicodeStringAt(12); } }

        #region Private
        internal BehaviorMonitoringBmRemoteThreadCreateArgsTraceData(Action<BehaviorMonitoringBmRemoteThreadCreateArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(12)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(12)));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<BehaviorMonitoringBmRemoteThreadCreateArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PID", PID);
             XmlAttrib(sb, "TPID", TPID);
             XmlAttrib(sb, "TTID", TTID);
             XmlAttrib(sb, "ImageName", ImageName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PID", "TPID", "TTID", "ImageName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PID;
                case 1:
                    return TPID;
                case 2:
                    return TTID;
                case 3:
                    return ImageName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<BehaviorMonitoringBmRemoteThreadCreateArgsTraceData> Action;
        #endregion
    }
    internal sealed class BehaviorMonitoringBmScavengerTaskArgsTraceData : TraceEvent
    {
        public int Count { get { return GetInt32At(0); } }

        #region Private
        internal BehaviorMonitoringBmScavengerTaskArgsTraceData(Action<BehaviorMonitoringBmScavengerTaskArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<BehaviorMonitoringBmScavengerTaskArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Count", Count);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Count"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Count;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<BehaviorMonitoringBmScavengerTaskArgsTraceData> Action;
        #endregion
    }
    internal sealed class BehaviorMonitoringProcessMonitorFlagsArgsTraceData : TraceEvent
    {
        public int PID { get { return GetInt32At(0); } }
        public string filepath { get { return GetUnicodeStringAt(4); } }
        public int flags { get { return GetInt32At(SkipUnicodeString(4)); } }
        public long flags2low { get { return GetInt64At(SkipUnicodeString(4)+4); } }
        public long flags2high { get { return GetInt64At(SkipUnicodeString(4)+12); } }

        #region Private
        internal BehaviorMonitoringProcessMonitorFlagsArgsTraceData(Action<BehaviorMonitoringProcessMonitorFlagsArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(4)+20));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(4)+20));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<BehaviorMonitoringProcessMonitorFlagsArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PID", PID);
             XmlAttrib(sb, "filepath", filepath);
             XmlAttrib(sb, "flags", flags);
             XmlAttrib(sb, "flags2low", flags2low);
             XmlAttrib(sb, "flags2high", flags2high);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PID", "filepath", "flags", "flags2low", "flags2high"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PID;
                case 1:
                    return filepath;
                case 2:
                    return flags;
                case 3:
                    return flags2low;
                case 4:
                    return flags2high;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<BehaviorMonitoringProcessMonitorFlagsArgsTraceData> Action;
        #endregion
    }
    internal sealed class CacheCacheLookupArgsTraceData : TraceEvent
    {
        public string FileName { get { return GetUnicodeStringAt(0); } }
        public string CacheName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string Result { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }

        #region Private
        internal CacheCacheLookupArgsTraceData(Action<CacheCacheLookupArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<CacheCacheLookupArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "FileName", FileName);
             XmlAttrib(sb, "CacheName", CacheName);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FileName", "CacheName", "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FileName;
                case 1:
                    return CacheName;
                case 2:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<CacheCacheLookupArgsTraceData> Action;
        #endregion
    }
    internal sealed class CacheMOACAddArgsTraceData : TraceEvent
    {
        public int ScanSource { get { return GetInt32At(0); } }
        public int EventType { get { return GetInt32At(4); } }
        internal int Classification { get { return GetInt32At(8); } }
        public string Info { get { return GetUnicodeStringAt(12); } }
        public string FileName { get { return GetUnicodeStringAt(SkipUnicodeString(12)); } }
        public int FileID { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(12))); } }
        public int FileUSN { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(12))+4); } }
        public int Result { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(12))+8); } }

        #region Private
        internal CacheMOACAddArgsTraceData(Action<CacheMOACAddArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(12))+12));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(12))+12));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<CacheMOACAddArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ScanSource", ScanSource);
             XmlAttrib(sb, "EventType", EventType);
             XmlAttrib(sb, "Classification", Classification);
             XmlAttrib(sb, "Info", Info);
             XmlAttrib(sb, "FileName", FileName);
             XmlAttrib(sb, "FileID", FileID);
             XmlAttrib(sb, "FileUSN", FileUSN);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ScanSource", "EventType", "Classification", "Info", "FileName", "FileID", "FileUSN", "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ScanSource;
                case 1:
                    return EventType;
                case 2:
                    return Classification;
                case 3:
                    return Info;
                case 4:
                    return FileName;
                case 5:
                    return FileID;
                case 6:
                    return FileUSN;
                case 7:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<CacheMOACAddArgsTraceData> Action;
        #endregion
    }
    internal sealed class ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData : TraceEvent
    {
        public string Message { get { return GetUnicodeStringAt(0); } }
        public string Name { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public long Data { get { return GetInt64At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public bool StartStop { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+8) != 0; } }
        public DateTime ThreadTime { get { return DateTime.FromFileTime(GetInt64At(SkipUnicodeString(SkipUnicodeString(0))+12)); } }

        #region Private
        internal ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData(Action<ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+20));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+20));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Message", Message);
             XmlAttrib(sb, "Name", Name);
             XmlAttrib(sb, "Data", Data);
             XmlAttrib(sb, "StartStop", StartStop);
             XmlAttrib(sb, "ThreadTime", ThreadTime);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Message", "Name", "Data", "StartStop", "ThreadTime"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Message;
                case 1:
                    return Name;
                case 2:
                    return Data;
                case 3:
                    return StartStop;
                case 4:
                    return ThreadTime;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<ExpensiveOperationTaskExpensiveOperationBeginArgs_V1TraceData> Action;
        #endregion
    }
    internal sealed class ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData : TraceEvent
    {
        public string Message { get { return GetUnicodeStringAt(0); } }
        public string Name { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public long Data { get { return GetInt64At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public bool StartStop { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+8) != 0; } }
        public DateTime ThreadTime { get { return DateTime.FromFileTime(GetInt64At(SkipUnicodeString(SkipUnicodeString(0))+12)); } }
        public long DeltaCPU { get { return GetInt64At(SkipUnicodeString(SkipUnicodeString(0))+20); } }
        public long DeltaWall { get { return GetInt64At(SkipUnicodeString(SkipUnicodeString(0))+28); } }

        #region Private
        internal ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData(Action<ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+36));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+36));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Message", Message);
             XmlAttrib(sb, "Name", Name);
             XmlAttrib(sb, "Data", Data);
             XmlAttrib(sb, "StartStop", StartStop);
             XmlAttrib(sb, "ThreadTime", ThreadTime);
             XmlAttrib(sb, "DeltaCPU", DeltaCPU);
             XmlAttrib(sb, "DeltaWall", DeltaWall);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Message", "Name", "Data", "StartStop", "ThreadTime", "DeltaCPU", "DeltaWall"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Message;
                case 1:
                    return Name;
                case 2:
                    return Data;
                case 3:
                    return StartStop;
                case 4:
                    return ThreadTime;
                case 5:
                    return DeltaCPU;
                case 6:
                    return DeltaWall;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<ExpensiveOperationTaskExpensiveOperationEndArgs_V1TraceData> Action;
        #endregion
    }
    internal sealed class MessageArgsTraceData : TraceEvent
    {
        public string Message { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal MessageArgsTraceData(Action<MessageArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<MessageArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<MessageArgsTraceData> Action;
        #endregion
    }
    internal sealed class Message59ArgsTraceData : TraceEvent
    {
        public string VName { get { return GetUTF8StringAt(0); } }
        public long SigSeq { get { return GetInt64At(SkipUTF8String(0)); } }
        public string SigSha { get { return GetUTF8StringAt(SkipUTF8String(0)+8); } }
        public int Result { get { return GetByteAt(SkipUTF8String(SkipUTF8String(0)+8)); } }

        #region Private
        internal Message59ArgsTraceData(Action<Message59ArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(SkipUTF8String(0)+8)+1));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(SkipUTF8String(0)+8)+1));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<Message59ArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "VName", VName);
             XmlAttrib(sb, "SigSeq", SigSeq);
             XmlAttrib(sb, "SigSha", SigSha);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "VName", "SigSeq", "SigSha", "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return VName;
                case 1:
                    return SigSeq;
                case 2:
                    return SigSha;
                case 3:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<Message59ArgsTraceData> Action;
        #endregion
    }
    internal sealed class Message68ArgsTraceData : TraceEvent
    {
        public string SigName { get { return GetUTF8StringAt(0); } }
        public long SigSeq { get { return GetInt64At(SkipUTF8String(0)); } }
        public string SigSha { get { return GetUTF8StringAt(SkipUTF8String(0)+8); } }
        public string SigTypeName { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(0)+8)); } }
        public long Time { get { return GetInt64At(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+8))); } }
        public long Limit { get { return GetInt64At(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+8))+8); } }
        public string FileName { get { return GetUnicodeStringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+8))+16); } }
        public string VPath { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+8))+16)); } }
        public string FileSha1 { get { return GetUTF8StringAt(SkipUnicodeString(SkipUnicodeString(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+8))+16))); } }
        public int PartialCRC1 { get { return GetInt32At(SkipUTF8String(SkipUnicodeString(SkipUnicodeString(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+8))+16)))); } }
        public int PartialCRC2 { get { return GetInt32At(SkipUTF8String(SkipUnicodeString(SkipUnicodeString(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+8))+16)))+4); } }
        public int PartialCRC3 { get { return GetInt32At(SkipUTF8String(SkipUnicodeString(SkipUnicodeString(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+8))+16)))+8); } }
        public long FileSize { get { return GetInt64At(SkipUTF8String(SkipUnicodeString(SkipUnicodeString(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+8))+16)))+12); } }

        #region Private
        internal Message68ArgsTraceData(Action<Message68ArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(SkipUnicodeString(SkipUnicodeString(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+8))+16)))+20));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(SkipUnicodeString(SkipUnicodeString(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+8))+16)))+20));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<Message68ArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SigName", SigName);
             XmlAttrib(sb, "SigSeq", SigSeq);
             XmlAttrib(sb, "SigSha", SigSha);
             XmlAttrib(sb, "SigTypeName", SigTypeName);
             XmlAttrib(sb, "Time", Time);
             XmlAttrib(sb, "Limit", Limit);
             XmlAttrib(sb, "FileName", FileName);
             XmlAttrib(sb, "VPath", VPath);
             XmlAttrib(sb, "FileSha1", FileSha1);
             XmlAttrib(sb, "PartialCRC1", PartialCRC1);
             XmlAttrib(sb, "PartialCRC2", PartialCRC2);
             XmlAttrib(sb, "PartialCRC3", PartialCRC3);
             XmlAttrib(sb, "FileSize", FileSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SigName", "SigSeq", "SigSha", "SigTypeName", "Time", "Limit", "FileName", "VPath", "FileSha1", "PartialCRC1", "PartialCRC2", "PartialCRC3", "FileSize"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SigName;
                case 1:
                    return SigSeq;
                case 2:
                    return SigSha;
                case 3:
                    return SigTypeName;
                case 4:
                    return Time;
                case 5:
                    return Limit;
                case 6:
                    return FileName;
                case 7:
                    return VPath;
                case 8:
                    return FileSha1;
                case 9:
                    return PartialCRC1;
                case 10:
                    return PartialCRC2;
                case 11:
                    return PartialCRC3;
                case 12:
                    return FileSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<Message68ArgsTraceData> Action;
        #endregion
    }
    internal sealed class Message69ArgsTraceData : TraceEvent
    {
        public string Guid { get { return GetUTF8StringAt(0); } }
        public long VolumeSize { get { return GetInt64At(SkipUTF8String(0)); } }
        public int Attributes { get { return GetInt32At(SkipUTF8String(0)+8); } }
        public int FilesCount { get { return GetInt32At(SkipUTF8String(0)+12); } }
        public string FileGuidsArray { get { return GetUTF8StringAt(SkipUTF8String(0)+16); } }
        public string FileSizeArray { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(0)+16)); } }
        public string CompressedFileSizeArray { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+16))); } }
        public string FileNameArray { get { return GetUnicodeStringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+16)))); } }
        public string FileAttributesArray { get { return GetUTF8StringAt(SkipUnicodeString(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+16))))); } }
        public string EfiFileTypeArray { get { return GetUTF8StringAt(SkipUTF8String(SkipUnicodeString(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+16)))))); } }
        public string FileSha1Array { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(SkipUnicodeString(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+16))))))); } }
        public string SmbiosAttributes { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUnicodeString(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+16)))))))); } }

        #region Private
        internal Message69ArgsTraceData(Action<Message69ArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUnicodeString(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+16))))))))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUnicodeString(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+16))))))))));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<Message69ArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Guid", Guid);
             XmlAttrib(sb, "VolumeSize", VolumeSize);
             XmlAttrib(sb, "Attributes", Attributes);
             XmlAttrib(sb, "FilesCount", FilesCount);
             XmlAttrib(sb, "FileGuidsArray", FileGuidsArray);
             XmlAttrib(sb, "FileSizeArray", FileSizeArray);
             XmlAttrib(sb, "CompressedFileSizeArray", CompressedFileSizeArray);
             XmlAttrib(sb, "FileNameArray", FileNameArray);
             XmlAttrib(sb, "FileAttributesArray", FileAttributesArray);
             XmlAttrib(sb, "EfiFileTypeArray", EfiFileTypeArray);
             XmlAttrib(sb, "FileSha1Array", FileSha1Array);
             XmlAttrib(sb, "SmbiosAttributes", SmbiosAttributes);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Guid", "VolumeSize", "Attributes", "FilesCount", "FileGuidsArray", "FileSizeArray", "CompressedFileSizeArray", "FileNameArray", "FileAttributesArray", "EfiFileTypeArray", "FileSha1Array", "SmbiosAttributes"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Guid;
                case 1:
                    return VolumeSize;
                case 2:
                    return Attributes;
                case 3:
                    return FilesCount;
                case 4:
                    return FileGuidsArray;
                case 5:
                    return FileSizeArray;
                case 6:
                    return CompressedFileSizeArray;
                case 7:
                    return FileNameArray;
                case 8:
                    return FileAttributesArray;
                case 9:
                    return EfiFileTypeArray;
                case 10:
                    return FileSha1Array;
                case 11:
                    return SmbiosAttributes;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<Message69ArgsTraceData> Action;
        #endregion
    }
    internal sealed class MessageUfsScanStartArgs_V1TraceData : TraceEvent
    {
        public string FilePath { get { return GetUnicodeStringAt(0); } }
        public DateTime ThreadTime { get { return DateTime.FromFileTime(GetInt64At(SkipUnicodeString(0))); } }

        #region Private
        internal MessageUfsScanStartArgs_V1TraceData(Action<MessageUfsScanStartArgs_V1TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(0)+8));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(0)+8));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<MessageUfsScanStartArgs_V1TraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "FilePath", FilePath);
             XmlAttrib(sb, "ThreadTime", ThreadTime);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FilePath", "ThreadTime"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FilePath;
                case 1:
                    return ThreadTime;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<MessageUfsScanStartArgs_V1TraceData> Action;
        #endregion
    }
    internal sealed class MessageUfsScanStart32Args_V1TraceData : TraceEvent
    {
        public string FilePath { get { return GetUnicodeStringAt(0); } }
        public int PID { get { return GetInt32At(SkipUnicodeString(0)); } }
        public DateTime ThreadTime { get { return DateTime.FromFileTime(GetInt64At(SkipUnicodeString(0)+4)); } }

        #region Private
        internal MessageUfsScanStart32Args_V1TraceData(Action<MessageUfsScanStart32Args_V1TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(0)+12));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(0)+12));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<MessageUfsScanStart32Args_V1TraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "FilePath", FilePath);
             XmlAttrib(sb, "PID", PID);
             XmlAttrib(sb, "ThreadTime", ThreadTime);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FilePath", "PID", "ThreadTime"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FilePath;
                case 1:
                    return PID;
                case 2:
                    return ThreadTime;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<MessageUfsScanStart32Args_V1TraceData> Action;
        #endregion
    }
    internal sealed class MetaStoreTaskMetaStoreActionArgsTraceData : TraceEvent
    {
        public string action { get { return GetUnicodeStringAt(0); } }
        public int vault { get { return GetInt32At(SkipUnicodeString(0)); } }
        public long key { get { return GetInt64At(SkipUnicodeString(0)+4); } }
        public int result { get { return GetInt32At(SkipUnicodeString(0)+12); } }

        #region Private
        internal MetaStoreTaskMetaStoreActionArgsTraceData(Action<MetaStoreTaskMetaStoreActionArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+16));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<MetaStoreTaskMetaStoreActionArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "action", action);
             XmlAttrib(sb, "vault", vault);
             XmlAttrib(sb, "key", key);
             XmlAttrib(sb, "result", result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "action", "vault", "key", "result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return action;
                case 1:
                    return vault;
                case 2:
                    return key;
                case 3:
                    return result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<MetaStoreTaskMetaStoreActionArgsTraceData> Action;
        #endregion
    }
    internal sealed class MetaStoreTaskMetaStoreMaintenanceArgsTraceData : TraceEvent
    {
        public int vault { get { return GetInt32At(0); } }
        public long records { get { return GetInt64At(4); } }
        public int result { get { return GetInt32At(12); } }

        #region Private
        internal MetaStoreTaskMetaStoreMaintenanceArgsTraceData(Action<MetaStoreTaskMetaStoreMaintenanceArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<MetaStoreTaskMetaStoreMaintenanceArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "vault", vault);
             XmlAttrib(sb, "records", records);
             XmlAttrib(sb, "result", result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "vault", "records", "result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return vault;
                case 1:
                    return records;
                case 2:
                    return result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<MetaStoreTaskMetaStoreMaintenanceArgsTraceData> Action;
        #endregion
    }
    internal sealed class PersistedStoreTaskPersistedStoreActionArgsTraceData : TraceEvent
    {
        public string action { get { return GetUnicodeStringAt(0); } }
        public long key { get { return GetInt64At(SkipUnicodeString(0)); } }
        public string filename { get { return GetUnicodeStringAt(SkipUnicodeString(0)+8); } }
        public int result { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0)+8)); } }

        #region Private
        internal PersistedStoreTaskPersistedStoreActionArgsTraceData(Action<PersistedStoreTaskPersistedStoreActionArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0)+8)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0)+8)+4));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<PersistedStoreTaskPersistedStoreActionArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "action", action);
             XmlAttrib(sb, "key", key);
             XmlAttrib(sb, "filename", filename);
             XmlAttrib(sb, "result", result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "action", "key", "filename", "result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return action;
                case 1:
                    return key;
                case 2:
                    return filename;
                case 3:
                    return result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<PersistedStoreTaskPersistedStoreActionArgsTraceData> Action;
        #endregion
    }
    internal sealed class PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData : TraceEvent
    {
        public long key { get { return GetInt64At(0); } }
        public string filename { get { return GetUnicodeStringAt(8); } }
        public long parentKey { get { return GetInt64At(SkipUnicodeString(8)); } }
        public int result { get { return GetInt32At(SkipUnicodeString(8)+8); } }

        #region Private
        internal PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData(Action<PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(8)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(8)+12));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "key", key);
             XmlAttrib(sb, "filename", filename);
             XmlAttrib(sb, "parentKey", parentKey);
             XmlAttrib(sb, "result", result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "key", "filename", "parentKey", "result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return key;
                case 1:
                    return filename;
                case 2:
                    return parentKey;
                case 3:
                    return result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<PersistedStoreTaskPersistedStoreAnalyzeFileArgsTraceData> Action;
        #endregion
    }
    internal sealed class PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData : TraceEvent
    {
        public int utilization { get { return GetInt32At(0); } }
        public int result { get { return GetInt32At(4); } }

        #region Private
        internal PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData(Action<PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "utilization", utilization);
             XmlAttrib(sb, "result", result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "utilization", "result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return utilization;
                case 1:
                    return result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<PersistedStoreTaskPersistedStoreMaintenanceArgsTraceData> Action;
        #endregion
    }
    internal sealed class ScanrequestStartArgs_V1TraceData : TraceEvent
    {
        public int Id { get { return GetByteAt(0); } }
        public string Type { get { return GetUTF8StringAt(1); } }
        public int Flags { get { return GetInt32At(SkipUTF8String(1)); } }
        public int ScanSource { get { return GetInt32At(SkipUTF8String(1)+4); } }
        public int ResourceCount { get { return GetInt32At(SkipUTF8String(1)+8); } }
        public string FirstResourceType { get { return GetUnicodeStringAt(SkipUTF8String(1)+12); } }
        public string FirstResourcePath { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUTF8String(1)+12)); } }
        public DateTime ThreadTime { get { return DateTime.FromFileTime(GetInt64At(SkipUnicodeString(SkipUnicodeString(SkipUTF8String(1)+12)))); } }

        #region Private
        internal ScanrequestStartArgs_V1TraceData(Action<ScanrequestStartArgs_V1TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUTF8String(1)+12))+8));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUTF8String(1)+12))+8));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<ScanrequestStartArgs_V1TraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "Type", Type);
             XmlAttrib(sb, "Flags", Flags);
             XmlAttrib(sb, "ScanSource", ScanSource);
             XmlAttrib(sb, "ResourceCount", ResourceCount);
             XmlAttrib(sb, "FirstResourceType", FirstResourceType);
             XmlAttrib(sb, "FirstResourcePath", FirstResourcePath);
             XmlAttrib(sb, "ThreadTime", ThreadTime);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "Type", "Flags", "ScanSource", "ResourceCount", "FirstResourceType", "FirstResourcePath", "ThreadTime"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return Type;
                case 2:
                    return Flags;
                case 3:
                    return ScanSource;
                case 4:
                    return ResourceCount;
                case 5:
                    return FirstResourceType;
                case 6:
                    return FirstResourcePath;
                case 7:
                    return ThreadTime;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<ScanrequestStartArgs_V1TraceData> Action;
        #endregion
    }
    internal sealed class SkippedfileArgsTraceData : TraceEvent
    {
        public string Path { get { return GetUnicodeStringAt(0); } }
        public string Reason { get { return GetUTF8StringAt(SkipUnicodeString(0)); } }

        #region Private
        internal SkippedfileArgsTraceData(Action<SkippedfileArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(SkipUnicodeString(0))));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<SkippedfileArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Path", Path);
             XmlAttrib(sb, "Reason", Reason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Path", "Reason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Path;
                case 1:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<SkippedfileArgsTraceData> Action;
        #endregion
    }
    internal sealed class StreamscanrequestStartArgs_V1TraceData : TraceEvent
    {
        public int Id { get { return GetInt32At(0); } }
        public string Path { get { return GetUnicodeStringAt(4); } }
        public string Process { get { return GetUnicodeStringAt(SkipUnicodeString(4)); } }
        public int Reason { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(4))); } }
        public DateTime ThreadTime { get { return DateTime.FromFileTime(GetInt64At(SkipUnicodeString(SkipUnicodeString(4))+4)); } }
        public int PID { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(4))+12); } }

        #region Private
        internal StreamscanrequestStartArgs_V1TraceData(Action<StreamscanrequestStartArgs_V1TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(4))+16));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(4))+16));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<StreamscanrequestStartArgs_V1TraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "Path", Path);
             XmlAttrib(sb, "Process", Process);
             XmlAttrib(sb, "Reason", Reason);
             XmlAttrib(sb, "ThreadTime", ThreadTime);
             XmlAttrib(sb, "PID", PID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "Path", "Process", "Reason", "ThreadTime", "PID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return Path;
                case 2:
                    return Process;
                case 3:
                    return Reason;
                case 4:
                    return ThreadTime;
                case 5:
                    return PID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<StreamscanrequestStartArgs_V1TraceData> Action;
        #endregion
    }
    internal sealed class VersionsArgsTraceData : TraceEvent
    {
        public string EngineVersion { get { return GetUnicodeStringAt(0); } }
        public string AVVersion { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string ASVersion { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }

        #region Private
        internal VersionsArgsTraceData(Action<VersionsArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<VersionsArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EngineVersion", EngineVersion);
             XmlAttrib(sb, "AVVersion", AVVersion);
             XmlAttrib(sb, "ASVersion", ASVersion);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EngineVersion", "AVVersion", "ASVersion"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EngineVersion;
                case 1:
                    return AVVersion;
                case 2:
                    return ASVersion;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-Engine"; }
        public static Guid GetProviderGuid() { return new Guid("0a002690-3839-4e3a-b3b6-96d8df868d99"); }
        private event Action<VersionsArgsTraceData> Action;
        #endregion
    }
}










