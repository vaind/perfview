#nullable disable

//<autogenerated/>
using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareAMFilter;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    internal sealed class MicrosoftAntimalwareAMFilterTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "Microsoft-Antimalware-AMFilter";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0xcfeb0608), unchecked((short) 0x330e), unchecked((short) 0x4410), 0xb0, 0x0d, 0x56, 0xd8, 0xda, 0x99, 0x86, 0xe6);
        public enum Keywords : long
        {
        };

        public MicrosoftAntimalwareAMFilterTraceEventParser(TraceEventSource source) : base(source) {}

        public event Action<AMFilter_CacheRemoveArgsTraceData> AMFilter_CacheAdd
        {
            add
            {
                RegisterTemplate(new AMFilter_CacheRemoveArgsTraceData(value, 5, 5, "AMFilter_CacheAdd", Guid.Empty, 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5, Guid.Empty);
            }
        }
        public event Action<EmptyTraceData> AMFilter_CacheFlush
        {
            add
            {
                RegisterTemplate(new EmptyTraceData(value, 1, 1, "AMFilter_CacheFlush", Guid.Empty, 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, Guid.Empty);
            }
        }
        public event Action<AMFilter_CacheRemoveArgsTraceData> AMFilter_CacheHit
        {
            add
            {
                RegisterTemplate(new AMFilter_CacheRemoveArgsTraceData(value, 3, 3, "AMFilter_CacheHit", Guid.Empty, 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3, Guid.Empty);
            }
        }
        public event Action<AMFilter_CacheRemoveArgsTraceData> AMFilter_CacheMiss
        {
            add
            {
                RegisterTemplate(new AMFilter_CacheRemoveArgsTraceData(value, 4, 4, "AMFilter_CacheMiss", Guid.Empty, 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4, Guid.Empty);
            }
        }
        public event Action<AMFilter_CacheRemoveArgsTraceData> AMFilter_CacheRemove
        {
            add
            {
                RegisterTemplate(new AMFilter_CacheRemoveArgsTraceData(value, 2, 2, "AMFilter_CacheRemove", Guid.Empty, 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, Guid.Empty);
            }
        }
        public event Action<AMFilter_FileScanArgsTraceData> AMFilter_FileScan
        {
            add
            {
                RegisterTemplate(new AMFilter_FileScanArgsTraceData(value, 9, 9, "AMFilter_FileScan", Guid.Empty, 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9, Guid.Empty);
            }
        }
        public event Action<AMFilter_ProcessContextArgsTraceData> AMFilter_ProcessContext
        {
            add
            {
                RegisterTemplate(new AMFilter_ProcessContextArgsTraceData(value, 8, 8, "AMFilter_ProcessContext", Guid.Empty, 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8, Guid.Empty);
            }
        }
        public event Action<EmptyTraceData> AMFilter_SeqReadFlag
        {
            add
            {
                RegisterTemplate(new EmptyTraceData(value, 6, 6, "AMFilter_SeqReadFlag", Guid.Empty, 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6, Guid.Empty);
            }
        }
        public event Action<AMFilter_TrustedProcessArgsTraceData> AMFilter_TrustedProcess
        {
            add
            {
                RegisterTemplate(new AMFilter_TrustedProcessArgsTraceData(value, 7, 7, "AMFilter_TrustedProcess", Guid.Empty, 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7, Guid.Empty);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private AMFilter_CacheRemoveArgsTraceData AMFilter_CacheAddTemplate(Action<AMFilter_CacheRemoveArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AMFilter_CacheRemoveArgsTraceData(action, 5, 5, "AMFilter_CacheAdd", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData AMFilter_CacheFlushTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 1, 1, "AMFilter_CacheFlush", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private AMFilter_CacheRemoveArgsTraceData AMFilter_CacheHitTemplate(Action<AMFilter_CacheRemoveArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AMFilter_CacheRemoveArgsTraceData(action, 3, 3, "AMFilter_CacheHit", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private AMFilter_CacheRemoveArgsTraceData AMFilter_CacheMissTemplate(Action<AMFilter_CacheRemoveArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AMFilter_CacheRemoveArgsTraceData(action, 4, 4, "AMFilter_CacheMiss", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private AMFilter_CacheRemoveArgsTraceData AMFilter_CacheRemoveTemplate(Action<AMFilter_CacheRemoveArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AMFilter_CacheRemoveArgsTraceData(action, 2, 2, "AMFilter_CacheRemove", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private AMFilter_FileScanArgsTraceData AMFilter_FileScanTemplate(Action<AMFilter_FileScanArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AMFilter_FileScanArgsTraceData(action, 9, 9, "AMFilter_FileScan", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private AMFilter_ProcessContextArgsTraceData AMFilter_ProcessContextTemplate(Action<AMFilter_ProcessContextArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AMFilter_ProcessContextArgsTraceData(action, 8, 8, "AMFilter_ProcessContext", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData AMFilter_SeqReadFlagTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 6, 6, "AMFilter_SeqReadFlag", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private AMFilter_TrustedProcessArgsTraceData AMFilter_TrustedProcessTemplate(Action<AMFilter_TrustedProcessArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AMFilter_TrustedProcessArgsTraceData(action, 7, 7, "AMFilter_TrustedProcess", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }

        static private volatile TraceEvent[] s_templates;
        protected internal override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[4];
                templates[0] = new AMFilter_CacheRemoveArgsTraceData(null, 2, 2, "AMFilter_CacheRemove", Guid.Empty, 0, "", ProviderGuid, ProviderName);
                templates[1] = new AMFilter_TrustedProcessArgsTraceData(null, 7, 7, "AMFilter_TrustedProcess", Guid.Empty, 0, "", ProviderGuid, ProviderName);
                templates[2] = new AMFilter_ProcessContextArgsTraceData(null, 8, 8, "AMFilter_ProcessContext", Guid.Empty, 0, "", ProviderGuid, ProviderName);
                templates[3] = new AMFilter_FileScanArgsTraceData(null, 9, 9, "AMFilter_FileScan", Guid.Empty, 0, "", ProviderGuid, ProviderName);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        private void RegisterTemplate(TraceEvent template)
        {
            Debug.Assert(template.ProviderGuid == MicrosoftAntimalwareAMFilterTraceEventParser.ProviderGuid);
            source.RegisterEventTemplate(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.MicrosoftAntimalwareAMFilter
{
    internal sealed class AMFilter_CacheRemoveArgsTraceData : TraceEvent
    {
        public long File_ID { get { return GetInt64At(0); } }

        #region Private
        internal AMFilter_CacheRemoveArgsTraceData(Action<AMFilter_CacheRemoveArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<AMFilter_CacheRemoveArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "File_ID", File_ID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "File_ID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return File_ID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-AMFilter"; }
        public static Guid GetProviderGuid() { return new Guid("cfeb0608-330e-4410-b00d-56d8da9986e6"); }
        private event Action<AMFilter_CacheRemoveArgsTraceData> Action;
        #endregion
    }
    internal sealed class AMFilter_FileScanArgsTraceData : TraceEvent
    {
        public string FileName { get { return GetUnicodeStringAt(0); } }
        public string Reason { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public long IoStatusBlockForNewFile { get { return GetInt64At(SkipUnicodeString(SkipUnicodeString(0))); } }

        #region Private
        internal AMFilter_FileScanArgsTraceData(Action<AMFilter_FileScanArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+8));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<AMFilter_FileScanArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "FileName", FileName);
             XmlAttrib(sb, "Reason", Reason);
             XmlAttrib(sb, "IoStatusBlockForNewFile", IoStatusBlockForNewFile);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FileName", "Reason", "IoStatusBlockForNewFile"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FileName;
                case 1:
                    return Reason;
                case 2:
                    return IoStatusBlockForNewFile;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-AMFilter"; }
        public static Guid GetProviderGuid() { return new Guid("cfeb0608-330e-4410-b00d-56d8da9986e6"); }
        private event Action<AMFilter_FileScanArgsTraceData> Action;
        #endregion
    }
    internal sealed class AMFilter_ProcessContextArgsTraceData : TraceEvent
    {
        public int Pid { get { return GetInt32At(0); } }
        public string Reason { get { return GetUnicodeStringAt(4); } }
        public int Flags { get { return GetInt32At(SkipUnicodeString(4)); } }
        public int ProcessFilterFlags { get { return GetInt32At(SkipUnicodeString(4)+4); } }
        public string PayloadProcessName { get { return GetUnicodeStringAt(SkipUnicodeString(4)+8); } }
        public long VmHardenType { get { return GetInt64At(SkipUnicodeString(SkipUnicodeString(4)+8)); } }
        public long ExemptVmHardenedTypes { get { return GetInt64At(SkipUnicodeString(SkipUnicodeString(4)+8)+8); } }

        #region Private
        internal AMFilter_ProcessContextArgsTraceData(Action<AMFilter_ProcessContextArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(4)+8)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(4)+8)+16));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<AMFilter_ProcessContextArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pid", Pid);
             XmlAttrib(sb, "Reason", Reason);
             XmlAttrib(sb, "Flags", Flags);
             XmlAttrib(sb, "ProcessFilterFlags", ProcessFilterFlags);
             XmlAttrib(sb, "ProcessName", ProcessName);
             XmlAttrib(sb, "VmHardenType", VmHardenType);
             XmlAttrib(sb, "ExemptVmHardenedTypes", ExemptVmHardenedTypes);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pid", "Reason", "Flags", "ProcessFilterFlags", "ProcessName", "VmHardenType", "ExemptVmHardenedTypes"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pid;
                case 1:
                    return Reason;
                case 2:
                    return Flags;
                case 3:
                    return ProcessFilterFlags;
                case 4:
                    return ProcessName;
                case 5:
                    return VmHardenType;
                case 6:
                    return ExemptVmHardenedTypes;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-AMFilter"; }
        public static Guid GetProviderGuid() { return new Guid("cfeb0608-330e-4410-b00d-56d8da9986e6"); }
        private event Action<AMFilter_ProcessContextArgsTraceData> Action;
        #endregion
    }
    internal sealed class AMFilter_TrustedProcessArgsTraceData : TraceEvent
    {
        public int Pid { get { return GetInt32At(0); } }
        public string Reason { get { return GetUnicodeStringAt(4); } }
        public int Trusted { get { return GetInt32At(SkipUnicodeString(4)); } }
        public int TotalTrusted { get { return GetInt32At(SkipUnicodeString(4)+4); } }
        public int TotalUntrusted { get { return GetInt32At(SkipUnicodeString(4)+8); } }
        public string Path { get { return GetUnicodeStringAt(SkipUnicodeString(4)+12); } }

        #region Private
        internal AMFilter_TrustedProcessArgsTraceData(Action<AMFilter_TrustedProcessArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(4)+12)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(4)+12)));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<AMFilter_TrustedProcessArgsTraceData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pid", Pid);
             XmlAttrib(sb, "Reason", Reason);
             XmlAttrib(sb, "Trusted", Trusted);
             XmlAttrib(sb, "TotalTrusted", TotalTrusted);
             XmlAttrib(sb, "TotalUntrusted", TotalUntrusted);
             XmlAttrib(sb, "Path", Path);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pid", "Reason", "Trusted", "TotalTrusted", "TotalUntrusted", "Path"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pid;
                case 1:
                    return Reason;
                case 2:
                    return Trusted;
                case 3:
                    return TotalTrusted;
                case 4:
                    return TotalUntrusted;
                case 5:
                    return Path;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-Antimalware-AMFilter"; }
        public static Guid GetProviderGuid() { return new Guid("cfeb0608-330e-4410-b00d-56d8da9986e6"); }
        private event Action<AMFilter_TrustedProcessArgsTraceData> Action;
        #endregion
    }
}










