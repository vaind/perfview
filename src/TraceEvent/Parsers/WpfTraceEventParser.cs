#nullable disable

//<autogenerated/>
using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    internal sealed class WpfTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "Microsoft-Windows-WPF";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0xe13b77a8), unchecked((short) 0x14b6), unchecked((short) 0x11de), 0x80, 0x69, 0x00, 0x1b, 0x21, 0x2b, 0x50, 0x09);
        public enum Keywords : long
        {
            General = 0x1,
            Perf = 0x2,
            Test = 0x4,
            Input = 0x8,
            Annotation = 0x10,
            XamlBaml = 0x20,
            Xps = 0x40,
            Animation = 0x80,
            Layout = 0x100,
            Hosting = 0x400,
            HeapMeter = 0x800,
            Graphics = 0x1000,
            Dispatcher = 0x2000,
        };

        public WpfTraceEventParser(TraceEventSource source) : base(source) {}

        public event Action<EmptyTraceData> AddAnnotationStart
        {
            add
            {
                source.RegisterEventTemplate(AddAnnotationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3013, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> AddAnnotationStop
        {
            add
            {
                source.RegisterEventTemplate(AddAnnotationStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3014, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> AddAttachedHighlightStart
        {
            add
            {
                source.RegisterEventTemplate(AddAttachedHighlightStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3039, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> AddAttachedHighlightStop
        {
            add
            {
                source.RegisterEventTemplate(AddAttachedHighlightStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3040, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> AddAttachedMHStart
        {
            add
            {
                source.RegisterEventTemplate(AddAttachedMHStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3043, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> AddAttachedMHStop
        {
            add
            {
                source.RegisterEventTemplate(AddAttachedMHStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3044, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> AddAttachedSNStart
        {
            add
            {
                source.RegisterEventTemplate(AddAttachedSNStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3035, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> AddAttachedSNStop
        {
            add
            {
                source.RegisterEventTemplate(AddAttachedSNStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3036, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> AnnotationInkChangedStart
        {
            add
            {
                source.RegisterEventTemplate(AnnotationInkChangedStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3033, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> AnnotationInkChangedStop
        {
            add
            {
                source.RegisterEventTemplate(AnnotationInkChangedStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3034, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> AnnotationTextChangedStart
        {
            add
            {
                source.RegisterEventTemplate(AnnotationTextChangedStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3031, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> AnnotationTextChangedStop
        {
            add
            {
                source.RegisterEventTemplate(AnnotationTextChangedStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3032, ProviderGuid);
            }
        }
        public event Action<Template_2> BitmapCopy
        {
            add
            {
                source.RegisterEventTemplate(BitmapCopyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11002, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> ClearHighlightStart
        {
            add
            {
                source.RegisterEventTemplate(ClearHighlightStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3009, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> ClearHighlightStop
        {
            add
            {
                source.RegisterEventTemplate(ClearHighlightStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3010, ProviderGuid);
            }
        }
        public event Action<CreateChannel> CreateChannel
        {
            add
            {
                source.RegisterEventTemplate(CreateChannelTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11040, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CreateHighlightStart
        {
            add
            {
                source.RegisterEventTemplate(CreateHighlightStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3007, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CreateHighlightStop
        {
            add
            {
                source.RegisterEventTemplate(CreateHighlightStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3008, ProviderGuid);
            }
        }
        public event Action<CreateOrAddOnChnl> CreateOrAddOnChnl
        {
            add
            {
                source.RegisterEventTemplate(CreateOrAddOnChnlTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11041, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CreateStickyNoteStart
        {
            add
            {
                source.RegisterEventTemplate(CreateStickyNoteStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3001, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CreateStickyNoteStop
        {
            add
            {
                source.RegisterEventTemplate(CreateStickyNoteStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3002, ProviderGuid);
            }
        }
        public event Action<CreateWpfGfxResource> CreateWpfGfxResource
        {
            add
            {
                source.RegisterEventTemplate(CreateWpfGfxResourceTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11042, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DeleteAnnotationStart
        {
            add
            {
                source.RegisterEventTemplate(DeleteAnnotationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3015, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DeleteAnnotationStop
        {
            add
            {
                source.RegisterEventTemplate(DeleteAnnotationStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3016, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DeleteInkNoteStart
        {
            add
            {
                source.RegisterEventTemplate(DeleteInkNoteStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3005, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DeleteInkNoteStop
        {
            add
            {
                source.RegisterEventTemplate(DeleteInkNoteStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3006, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DeleteTextNoteStart
        {
            add
            {
                source.RegisterEventTemplate(DeleteTextNoteStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3003, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DeleteTextNoteStop
        {
            add
            {
                source.RegisterEventTemplate(DeleteTextNoteStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3004, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DeserializeAnnotationStart
        {
            add
            {
                source.RegisterEventTemplate(DeserializeAnnotationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3025, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DeserializeAnnotationStop
        {
            add
            {
                source.RegisterEventTemplate(DeserializeAnnotationStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3026, ProviderGuid);
            }
        }
        public event Action<Template_1> DrawBitmap
        {
            add
            {
                source.RegisterEventTemplate(DrawBitmapTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11001, ProviderGuid);
            }
        }
        public event Action<FloatBounds> DWMDraw_
        {
            add
            {
                source.RegisterEventTemplate(DWMDraw_Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11022, ProviderGuid);
            }
        }
        public event Action<FloatBounds> DWMDraw_BeginLayerEnd
        {
            add
            {
                source.RegisterEventTemplate(DWMDraw_BeginLayerEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11017, ProviderGuid);
            }
        }
        public event Action<FloatBounds> DWMDraw_BeginLayerStart
        {
            add
            {
                source.RegisterEventTemplate(DWMDraw_BeginLayerStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11016, ProviderGuid);
            }
        }
        public event Action<Template_6> DWMDraw_BitmapEnd
        {
            add
            {
                source.RegisterEventTemplate(DWMDraw_BitmapEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11007, ProviderGuid);
            }
        }
        public event Action<Template_6> DWMDraw_BitmapStart
        {
            add
            {
                source.RegisterEventTemplate(DWMDraw_BitmapStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11006, ProviderGuid);
            }
        }
        public event Action<FloatBounds> DWMDraw_ClearStart
        {
            add
            {
                source.RegisterEventTemplate(DWMDraw_ClearStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11004, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DWMDraw_ClearStop
        {
            add
            {
                source.RegisterEventTemplate(DWMDraw_ClearStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11005, ProviderGuid);
            }
        }
        public event Action<Template_6> DWMDraw_ClippedBitmapEnd
        {
            add
            {
                source.RegisterEventTemplate(DWMDraw_ClippedBitmapEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11021, ProviderGuid);
            }
        }
        public event Action<Template_6> DWMDraw_ClippedBitmapStart
        {
            add
            {
                source.RegisterEventTemplate(DWMDraw_ClippedBitmapStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11020, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DWMDraw_EndLayerEnd
        {
            add
            {
                source.RegisterEventTemplate(DWMDraw_EndLayerEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11019, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DWMDraw_EndLayerStart
        {
            add
            {
                source.RegisterEventTemplate(DWMDraw_EndLayerStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11018, ProviderGuid);
            }
        }
        public event Action<Template_6> DWMDraw_GeometryEnd
        {
            add
            {
                source.RegisterEventTemplate(DWMDraw_GeometryEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11011, ProviderGuid);
            }
        }
        public event Action<Template_6> DWMDraw_GeometryStart
        {
            add
            {
                source.RegisterEventTemplate(DWMDraw_GeometryStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11010, ProviderGuid);
            }
        }
        public event Action<Template_6> DWMDraw_GlyphRunEnd
        {
            add
            {
                source.RegisterEventTemplate(DWMDraw_GlyphRunEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11015, ProviderGuid);
            }
        }
        public event Action<Template_6> DWMDraw_GlyphRunStart
        {
            add
            {
                source.RegisterEventTemplate(DWMDraw_GlyphRunStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11014, ProviderGuid);
            }
        }
        public event Action<Template_6> DWMDraw_ImageEnd
        {
            add
            {
                source.RegisterEventTemplate(DWMDraw_ImageEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11013, ProviderGuid);
            }
        }
        public event Action<Template_6> DWMDraw_ImageStart
        {
            add
            {
                source.RegisterEventTemplate(DWMDraw_ImageStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11012, ProviderGuid);
            }
        }
        public event Action<Template_6> DWMDraw_RectangleEnd
        {
            add
            {
                source.RegisterEventTemplate(DWMDraw_RectangleEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11009, ProviderGuid);
            }
        }
        public event Action<Template_6> DWMDraw_RectangleStart
        {
            add
            {
                source.RegisterEventTemplate(DWMDraw_RectangleStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11008, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> GetAnnotationByIdStart
        {
            add
            {
                source.RegisterEventTemplate(GetAnnotationByIdStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3017, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> GetAnnotationByIdStop
        {
            add
            {
                source.RegisterEventTemplate(GetAnnotationByIdStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3018, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> GetAnnotationByLocStart
        {
            add
            {
                source.RegisterEventTemplate(GetAnnotationByLocStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3019, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> GetAnnotationByLocStop
        {
            add
            {
                source.RegisterEventTemplate(GetAnnotationByLocStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3020, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> GetAnnotationsStart
        {
            add
            {
                source.RegisterEventTemplate(GetAnnotationsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3021, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> GetAnnotationsStop
        {
            add
            {
                source.RegisterEventTemplate(GetAnnotationsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3022, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> LayerEventStart
        {
            add
            {
                source.RegisterEventTemplate(LayerEventStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11023, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> LayerEventStop
        {
            add
            {
                source.RegisterEventTemplate(LayerEventStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11024, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> LoadAnnotationsStart
        {
            add
            {
                source.RegisterEventTemplate(LoadAnnotationsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3011, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> LoadAnnotationsStop
        {
            add
            {
                source.RegisterEventTemplate(LoadAnnotationsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3012, ProviderGuid);
            }
        }
        public event Action<ID32Template> ManipulationEventRaised
        {
            add
            {
                source.RegisterEventTemplate(ManipulationEventRaisedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2007, ProviderGuid);
            }
        }
        public event Action<ID32Template> ManipulationReportFrame
        {
            add
            {
                source.RegisterEventTemplate(ManipulationReportFrameTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2006, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> NavigationNavigationAsyncWorkItem
        {
            add
            {
                source.RegisterEventTemplate(NavigationNavigationAsyncWorkItemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9083, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> NavigationNavigationContentRendered
        {
            add
            {
                source.RegisterEventTemplate(NavigationNavigationContentRenderedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9086, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> NavigationNavigationEnd
        {
            add
            {
                source.RegisterEventTemplate(NavigationNavigationEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9085, ProviderGuid);
            }
        }
        public event Action<URITemplate> NavigationNavigationLaunchBrowser
        {
            add
            {
                source.RegisterEventTemplate(NavigationNavigationLaunchBrowserTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9088, ProviderGuid);
            }
        }
        public event Action<Template_57> NavigationNavigationPageFunctionReturn
        {
            add
            {
                source.RegisterEventTemplate(NavigationNavigationPageFunctionReturnTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9089, ProviderGuid);
            }
        }
        public event Action<Template_56> NavigationNavigationStart
        {
            add
            {
                source.RegisterEventTemplate(NavigationNavigationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9087, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> NavigationNavigationWebResponseReceived
        {
            add
            {
                source.RegisterEventTemplate(NavigationNavigationWebResponseReceivedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9084, ProviderGuid);
            }
        }
        public event Action<ID32Template> PenThreadPoolThreadAcquisition
        {
            add
            {
                source.RegisterEventTemplate(PenThreadPoolThreadAcquisitionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2008, ProviderGuid);
            }
        }
        public event Action<ReleaseOnChannel> ReleaseOnChannel
        {
            add
            {
                source.RegisterEventTemplate(ReleaseOnChannelTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11043, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> RemoveAttachedHighlightStart
        {
            add
            {
                source.RegisterEventTemplate(RemoveAttachedHighlightStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3041, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> RemoveAttachedHighlightStop
        {
            add
            {
                source.RegisterEventTemplate(RemoveAttachedHighlightStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3042, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> RemoveAttachedMHStart
        {
            add
            {
                source.RegisterEventTemplate(RemoveAttachedMHStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3045, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> RemoveAttachedMHStop
        {
            add
            {
                source.RegisterEventTemplate(RemoveAttachedMHStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3046, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> RemoveAttachedSNStart
        {
            add
            {
                source.RegisterEventTemplate(RemoveAttachedSNStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3037, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> RemoveAttachedSNStop
        {
            add
            {
                source.RegisterEventTemplate(RemoveAttachedSNStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3038, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> SerializeAnnotationStart
        {
            add
            {
                source.RegisterEventTemplate(SerializeAnnotationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3023, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> SerializeAnnotationStop
        {
            add
            {
                source.RegisterEventTemplate(SerializeAnnotationStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3024, ProviderGuid);
            }
        }
        public event Action<IntBounds> SetClip
        {
            add
            {
                source.RegisterEventTemplate(SetClipTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11003, ProviderGuid);
            }
        }
        public event Action<ID32Template> StylusEventQueued
        {
            add
            {
                source.RegisterEventTemplate(StylusEventQueuedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2002, ProviderGuid);
            }
        }
        public event Action<ID32Template> TouchDownReported
        {
            add
            {
                source.RegisterEventTemplate(TouchDownReportedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2003, ProviderGuid);
            }
        }
        public event Action<ID32Template> TouchMoveReported
        {
            add
            {
                source.RegisterEventTemplate(TouchMoveReportedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2004, ProviderGuid);
            }
        }
        public event Action<ID32Template> TouchUpReported
        {
            add
            {
                source.RegisterEventTemplate(TouchUpReportedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2005, ProviderGuid);
            }
        }
        public event Action<GfxSoftwareFallback> UnexpectedSoftwareFallback
        {
            add
            {
                source.RegisterEventTemplate(UnexpectedSoftwareFallbackTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11044, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> UpdateAnnotationWithSNCStart
        {
            add
            {
                source.RegisterEventTemplate(UpdateAnnotationWithSNCStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3027, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> UpdateAnnotationWithSNCStop
        {
            add
            {
                source.RegisterEventTemplate(UpdateAnnotationWithSNCStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3028, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> UpdateSNCWithAnnotationStart
        {
            add
            {
                source.RegisterEventTemplate(UpdateSNCWithAnnotationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3029, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> UpdateSNCWithAnnotationStop
        {
            add
            {
                source.RegisterEventTemplate(UpdateSNCWithAnnotationStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3030, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> UpdateVisualStateStart
        {
            add
            {
                source.RegisterEventTemplate(UpdateVisualStateStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> UpdateVisualStateStop
        {
            add
            {
                source.RegisterEventTemplate(UpdateVisualStateStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9, ProviderGuid);
            }
        }
        public event Action<VisualCacheTemplate> VisualCacheAlloc
        {
            add
            {
                source.RegisterEventTemplate(VisualCacheAllocTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11038, ProviderGuid);
            }
        }
        public event Action<VisualCacheTemplate> VisualCacheUpdate
        {
            add
            {
                source.RegisterEventTemplate(VisualCacheUpdateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11039, ProviderGuid);
            }
        }
        public event Action<PerfElementID> WClientAnimRenderHandlerStart
        {
            add
            {
                source.RegisterEventTemplate(WClientAnimRenderHandlerStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11049, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientAnimRenderHandlerStop
        {
            add
            {
                source.RegisterEventTemplate(WClientAnimRenderHandlerStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11050, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientAppCtor
        {
            add
            {
                source.RegisterEventTemplate(WClientAppCtorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientAppRun
        {
            add
            {
                source.RegisterEventTemplate(WClientAppRunTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3, ProviderGuid);
            }
        }
        public event Action<LayoutAborted> WClientArrangeArrangeAbort
        {
            add
            {
                source.RegisterEventTemplate(WClientArrangeArrangeAbortTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7011, ProviderGuid);
            }
        }
        public event Action<ArrangeData> WClientArrangeArrangeElementBegin
        {
            add
            {
                source.RegisterEventTemplate(WClientArrangeArrangeElementBeginTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7013, ProviderGuid);
            }
        }
        public event Action<ArrangeData> WClientArrangeArrangeElementEnd
        {
            add
            {
                source.RegisterEventTemplate(WClientArrangeArrangeElementEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7014, ProviderGuid);
            }
        }
        public event Action<PerfElementID> WClientArrangeStart
        {
            add
            {
                source.RegisterEventTemplate(WClientArrangeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7010, ProviderGuid);
            }
        }
        public event Action<Counter> WClientArrangeStop
        {
            add
            {
                source.RegisterEventTemplate(WClientArrangeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7012, ProviderGuid);
            }
        }
        public event Action<PerfElementID> WClientCompileSceneStart
        {
            add
            {
                source.RegisterEventTemplate(WClientCompileSceneStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11057, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientCompileSceneStop
        {
            add
            {
                source.RegisterEventTemplate(WClientCompileSceneStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11058, ProviderGuid);
            }
        }
        public event Action<CreateIRT> WClientCreateIRT
        {
            add
            {
                source.RegisterEventTemplate(WClientCreateIRTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11065, ProviderGuid);
            }
        }
        public event Action<Template_18> WClientCreateVisual
        {
            add
            {
                source.RegisterEventTemplate(WClientCreateVisualTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, ProviderGuid);
            }
        }
        public event Action<HwndTemplate> WClientDesktopRTCreateStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDesktopRTCreateStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11025, ProviderGuid);
            }
        }
        public event Action<HwndTemplate> WClientDesktopRTCreateStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDesktopRTCreateStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11026, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXAlphaFlattenStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXAlphaFlattenStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5030, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXAlphaFlattenStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXAlphaFlattenStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5031, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXCommitPageStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXCommitPageStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5042, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXCommitPageStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXCommitPageStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5043, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXConvertFontStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXConvertFontStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5044, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXConvertFontStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXConvertFontStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5045, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXConvertImageStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXConvertImageStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5046, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXConvertImageStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXConvertImageStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5047, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXEndDocStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXEndDocStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5036, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXEndDocStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXEndDocStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5037, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXEndPageStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXEndPageStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5040, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXEndPageStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXEndPageStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5041, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXEnsureOMStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXEnsureOMStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5026, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXEnsureOMStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXEnsureOMStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5027, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXFindStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXFindStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5023, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXFindStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXFindStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5024, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXFlushPageStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXFlushPageStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5001, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXFlushPageStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXFlushPageStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5002, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXGetDevModeStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXGetDevModeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5032, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXGetDevModeStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXGetDevModeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5033, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXGetPageStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXGetPageStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5058, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXGetPageStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXGetPageStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5059, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXGetPrintCapStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXGetPrintCapStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5009, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXGetPrintCapStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXGetPrintCapStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5010, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXGetStreamStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXGetStreamStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5017, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXGetStreamStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXGetStreamStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5018, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXGetVisualStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXGetVisualStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5005, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXGetVisualStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXGetVisualStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5006, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXInstantiated
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXInstantiatedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5065, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXInvalidateView
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXInvalidateViewTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5021, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXLayoutStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXLayoutStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5063, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXLayoutStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXLayoutStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5064, ProviderGuid);
            }
        }
        public event Action<Template_33> WClientDRXLineDown
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXLineDownTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5060, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXLoadPrimitiveStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXLoadPrimitiveStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5050, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXLoadPrimitiveStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXLoadPrimitiveStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5051, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXOpenPackageStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXOpenPackageStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5015, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXOpenPackageStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXOpenPackageStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5016, ProviderGuid);
            }
        }
        public event Action<Template_33> WClientDRXPageDown
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXPageDownTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5061, ProviderGuid);
            }
        }
        public event Action<Template_34> WClientDRXPageJump
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXPageJumpTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5062, ProviderGuid);
            }
        }
        public event Action<Template_32> WClientDRXPageLoaded
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXPageLoadedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5020, ProviderGuid);
            }
        }
        public event Action<Template_31> WClientDRXPageVisible
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXPageVisibleTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5019, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXPTProviderStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXPTProviderStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5011, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXPTProviderStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXPTProviderStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5012, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXRasterStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXRasterStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5013, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXRasterStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXRasterStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5014, ProviderGuid);
            }
        }
        public event Action<Counter> WClientDRXReadStreamStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXReadStreamStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5056, ProviderGuid);
            }
        }
        public event Action<Template_30> WClientDRXReadStreamStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXReadStreamStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5057, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXReleaseWriterStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXReleaseWriterStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5007, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXReleaseWriterStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXReleaseWriterStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5008, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXSavePageStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXSavePageStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5052, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXSavePageStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXSavePageStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5053, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXSaveXpsStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXSaveXpsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5048, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXSaveXpsStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXSaveXpsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5049, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXSerializationStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXSerializationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5054, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXSerializationStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXSerializationStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5055, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXSerializeTreeStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXSerializeTreeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5003, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXSerializeTreeStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXSerializeTreeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5004, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXStartDocStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXStartDocStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5034, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXStartDocStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXStartDocStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5035, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXStartPageStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXStartPageStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5038, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXStartPageStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXStartPageStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5039, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXStyleCreated
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXStyleCreatedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5022, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXTreeFlattenStart
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXTreeFlattenStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5028, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXTreeFlattenStop
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXTreeFlattenStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5029, ProviderGuid);
            }
        }
        public event Action<Template_35> WClientDRXZoom
        {
            add
            {
                source.RegisterEventTemplate(WClientDRXZoomTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5025, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientFontCache
        {
            add
            {
                source.RegisterEventTemplate(WClientFontCacheTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1001, ProviderGuid);
            }
        }
        public event Action<Template_19> WClientInputMessage
        {
            add
            {
                source.RegisterEventTemplate(WClientInputMessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2001, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientInterlockedRenderStart
        {
            add
            {
                source.RegisterEventTemplate(WClientInterlockedRenderStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11045, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientInterlockedRenderStop
        {
            add
            {
                source.RegisterEventTemplate(WClientInterlockedRenderStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11046, ProviderGuid);
            }
        }
        public event Action<LayoutAborted> WClientLayoutAbort
        {
            add
            {
                source.RegisterEventTemplate(WClientLayoutAbortTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7015, ProviderGuid);
            }
        }
        public event Action<PerfElementID> WClientLayoutException
        {
            add
            {
                source.RegisterEventTemplate(WClientLayoutExceptionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7022, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientLayoutFireAutomationEventsBegin
        {
            add
            {
                source.RegisterEventTemplate(WClientLayoutFireAutomationEventsBeginTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7020, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientLayoutFireAutomationEventsEnd
        {
            add
            {
                source.RegisterEventTemplate(WClientLayoutFireAutomationEventsEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7021, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientLayoutFireLayoutUpdatedBegin
        {
            add
            {
                source.RegisterEventTemplate(WClientLayoutFireLayoutUpdatedBeginTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7018, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientLayoutFireLayoutUpdatedEnd
        {
            add
            {
                source.RegisterEventTemplate(WClientLayoutFireLayoutUpdatedEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7019, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientLayoutFireSizeChangedBegin
        {
            add
            {
                source.RegisterEventTemplate(WClientLayoutFireSizeChangedBeginTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7016, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientLayoutFireSizeChangedEnd
        {
            add
            {
                source.RegisterEventTemplate(WClientLayoutFireSizeChangedEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7017, ProviderGuid);
            }
        }
        public event Action<PerfElementID> WClientLayoutInvalidated
        {
            add
            {
                source.RegisterEventTemplate(WClientLayoutInvalidatedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7023, ProviderGuid);
            }
        }
        public event Action<LayoutSourceTemplate> WClientLayoutStart
        {
            add
            {
                source.RegisterEventTemplate(WClientLayoutStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7001, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientLayoutStop
        {
            add
            {
                source.RegisterEventTemplate(WClientLayoutStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7002, ProviderGuid);
            }
        }
        public event Action<LayoutAborted> WClientMeasureMeasureAbort
        {
            add
            {
                source.RegisterEventTemplate(WClientMeasureMeasureAbortTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7006, ProviderGuid);
            }
        }
        public event Action<MeasureData> WClientMeasureMeasureElementBegin
        {
            add
            {
                source.RegisterEventTemplate(WClientMeasureMeasureElementBeginTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7008, ProviderGuid);
            }
        }
        public event Action<MeasureData> WClientMeasureMeasureElementEnd
        {
            add
            {
                source.RegisterEventTemplate(WClientMeasureMeasureElementEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7009, ProviderGuid);
            }
        }
        public event Action<PerfElementID> WClientMeasureStart
        {
            add
            {
                source.RegisterEventTemplate(WClientMeasureStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7005, ProviderGuid);
            }
        }
        public event Action<Counter> WClientMeasureStop
        {
            add
            {
                source.RegisterEventTemplate(WClientMeasureStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7007, ProviderGuid);
            }
        }
        public event Action<Template_20> WClientMediaRenderStart
        {
            add
            {
                source.RegisterEventTemplate(WClientMediaRenderStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11051, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientMediaRenderStop
        {
            add
            {
                source.RegisterEventTemplate(WClientMediaRenderStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11052, ProviderGuid);
            }
        }
        public event Action<PerfElementID> WClientOnRenderStart
        {
            add
            {
                source.RegisterEventTemplate(WClientOnRenderStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11063, ProviderGuid);
            }
        }
        public event Action<PerfElementID> WClientOnRenderStop
        {
            add
            {
                source.RegisterEventTemplate(WClientOnRenderStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11064, ProviderGuid);
            }
        }
        public event Action<URITemplate> WClientParseBamlStart
        {
            add
            {
                source.RegisterEventTemplate(WClientParseBamlStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4001, ProviderGuid);
            }
        }
        public event Action<URITemplate> WClientParseBamlStop
        {
            add
            {
                source.RegisterEventTemplate(WClientParseBamlStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4002, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientParseFefCrInstStart
        {
            add
            {
                source.RegisterEventTemplate(WClientParseFefCrInstStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4005, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientParseFefCrInstStop
        {
            add
            {
                source.RegisterEventTemplate(WClientParseFefCrInstStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4006, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientParseInstVisTreeStart
        {
            add
            {
                source.RegisterEventTemplate(WClientParseInstVisTreeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4007, ProviderGuid);
            }
        }
        public event Action<MessageStringTemplate> WClientParseInstVisTreeStop
        {
            add
            {
                source.RegisterEventTemplate(WClientParseInstVisTreeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4008, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientParseRdrCrInFTypStart
        {
            add
            {
                source.RegisterEventTemplate(WClientParseRdrCrInFTypStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4011, ProviderGuid);
            }
        }
        public event Action<TypeStringTemplate> WClientParseRdrCrInFTypStop
        {
            add
            {
                source.RegisterEventTemplate(WClientParseRdrCrInFTypStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4012, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientParseRdrCrInstStart
        {
            add
            {
                source.RegisterEventTemplate(WClientParseRdrCrInstStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4009, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientParseRdrCrInstStop
        {
            add
            {
                source.RegisterEventTemplate(WClientParseRdrCrInstStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4010, ProviderGuid);
            }
        }
        public event Action<WClientParseXamlBamlInfoTemplate> WClientParseXamlBamlInfo
        {
            add
            {
                source.RegisterEventTemplate(WClientParseXamlBamlInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4021, ProviderGuid);
            }
        }
        public event Action<URITemplate> WClientParseXamlStart
        {
            add
            {
                source.RegisterEventTemplate(WClientParseXamlStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4020, ProviderGuid);
            }
        }
        public event Action<URITemplate> WClientParseXamlStop
        {
            add
            {
                source.RegisterEventTemplate(WClientParseXamlStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4022, ProviderGuid);
            }
        }
        public event Action<URITemplate> WClientParseXmlStart
        {
            add
            {
                source.RegisterEventTemplate(WClientParseXmlStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4003, ProviderGuid);
            }
        }
        public event Action<URITemplate> WClientParseXmlStop
        {
            add
            {
                source.RegisterEventTemplate(WClientParseXmlStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4004, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientPostRender
        {
            add
            {
                source.RegisterEventTemplate(WClientPostRenderTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11053, ProviderGuid);
            }
        }
        public event Action<PtrTemplate> WClientPotentialIRTResource
        {
            add
            {
                source.RegisterEventTemplate(WClientPotentialIRTResourceTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11066, ProviderGuid);
            }
        }
        public event Action<PerfElementID> WClientPrecomputeSceneStart
        {
            add
            {
                source.RegisterEventTemplate(WClientPrecomputeSceneStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11055, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientPrecomputeSceneStop
        {
            add
            {
                source.RegisterEventTemplate(WClientPrecomputeSceneStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11056, ProviderGuid);
            }
        }
        public event Action<Template_37> WClientPropParentCheck
        {
            add
            {
                source.RegisterEventTemplate(WClientPropParentCheckTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7, ProviderGuid);
            }
        }
        public event Action<Template_21> WClientQPCFrequency
        {
            add
            {
                source.RegisterEventTemplate(WClientQPCFrequencyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11054, ProviderGuid);
            }
        }
        public event Action<PerfElementID> WClientRenderHandlerStart
        {
            add
            {
                source.RegisterEventTemplate(WClientRenderHandlerStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11047, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientRenderHandlerStop
        {
            add
            {
                source.RegisterEventTemplate(WClientRenderHandlerStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11048, ProviderGuid);
            }
        }
        public event Action<AssemblyNameTemplate> WClientResourceBamlAssembly
        {
            add
            {
                source.RegisterEventTemplate(WClientResourceBamlAssemblyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4019, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientResourceCacheMiss
        {
            add
            {
                source.RegisterEventTemplate(WClientResourceCacheMissTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4017, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientResourceCacheNull
        {
            add
            {
                source.RegisterEventTemplate(WClientResourceCacheNullTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4016, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientResourceCacheValue
        {
            add
            {
                source.RegisterEventTemplate(WClientResourceCacheValueTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4015, ProviderGuid);
            }
        }
        public event Action<KeyStringTemplate> WClientResourceFindStart
        {
            add
            {
                source.RegisterEventTemplate(WClientResourceFindStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4013, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientResourceFindStop
        {
            add
            {
                source.RegisterEventTemplate(WClientResourceFindStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4014, ProviderGuid);
            }
        }
        public event Action<KeyStringTemplate> WClientResourceStock
        {
            add
            {
                source.RegisterEventTemplate(WClientResourceStockTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4018, ProviderGuid);
            }
        }
        public event Action<Template_24> WClientScheduleRender
        {
            add
            {
                source.RegisterEventTemplate(WClientScheduleRenderTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11062, ProviderGuid);
            }
        }
        public event Action<InfoStringTemplate> WClientString
        {
            add
            {
                source.RegisterEventTemplate(WClientStringTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4, ProviderGuid);
            }
        }
        public event Action<InfoStringTemplate> WClientStringStart
        {
            add
            {
                source.RegisterEventTemplate(WClientStringStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5, ProviderGuid);
            }
        }
        public event Action<InfoStringTemplate> WClientStringStop
        {
            add
            {
                source.RegisterEventTemplate(WClientStringStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6, ProviderGuid);
            }
        }
        public event Action<TimeTick> WClientTimeManagerTickStart
        {
            add
            {
                source.RegisterEventTemplate(WClientTimeManagerTickStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6001, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientTimeManagerTickStop
        {
            add
            {
                source.RegisterEventTemplate(WClientTimeManagerTickStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6002, ProviderGuid);
            }
        }
        public event Action<Template_15> WClientUceCheckDeviceState
        {
            add
            {
                source.RegisterEventTemplate(WClientUceCheckDeviceStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11037, ProviderGuid);
            }
        }
        public event Action<Template_23> WClientUceNotifyPresent
        {
            add
            {
                source.RegisterEventTemplate(WClientUceNotifyPresentTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11061, ProviderGuid);
            }
        }
        public event Action<Template_10> WClientUcePrecomputeStart
        {
            add
            {
                source.RegisterEventTemplate(WClientUcePrecomputeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11030, ProviderGuid);
            }
        }
        public event Action<Template_10> WClientUcePrecomputeStop
        {
            add
            {
                source.RegisterEventTemplate(WClientUcePrecomputeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11031, ProviderGuid);
            }
        }
        public event Action<Template_12> WClientUcePresentStart
        {
            add
            {
                source.RegisterEventTemplate(WClientUcePresentStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11034, ProviderGuid);
            }
        }
        public event Action<Template_12> WClientUcePresentStop
        {
            add
            {
                source.RegisterEventTemplate(WClientUcePresentStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11035, ProviderGuid);
            }
        }
        public event Action<Template_11> WClientUceProcessQueue
        {
            add
            {
                source.RegisterEventTemplate(WClientUceProcessQueueTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11029, ProviderGuid);
            }
        }
        public event Action<Template_10> WClientUceProcessQueueStart
        {
            add
            {
                source.RegisterEventTemplate(WClientUceProcessQueueStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11027, ProviderGuid);
            }
        }
        public event Action<Template_10> WClientUceProcessQueueStop
        {
            add
            {
                source.RegisterEventTemplate(WClientUceProcessQueueStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11028, ProviderGuid);
            }
        }
        public event Action<Template_10> WClientUceRenderStart
        {
            add
            {
                source.RegisterEventTemplate(WClientUceRenderStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11032, ProviderGuid);
            }
        }
        public event Action<Template_10> WClientUceRenderStop
        {
            add
            {
                source.RegisterEventTemplate(WClientUceRenderStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11033, ProviderGuid);
            }
        }
        public event Action<Template_13> WClientUceResponse
        {
            add
            {
                source.RegisterEventTemplate(WClientUceResponseTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11036, ProviderGuid);
            }
        }
        public event Action<ID32Template> WClientUICommitChannel
        {
            add
            {
                source.RegisterEventTemplate(WClientUICommitChannelTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11060, ProviderGuid);
            }
        }
        public event Action<DispatcherMessage> WClientUIContextAbort
        {
            add
            {
                source.RegisterEventTemplate(WClientUIContextAbortTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 12004, ProviderGuid);
            }
        }
        public event Action<DispatcherMessage> WClientUIContextDispatchStart
        {
            add
            {
                source.RegisterEventTemplate(WClientUIContextDispatchStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 12001, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientUIContextDispatchStop
        {
            add
            {
                source.RegisterEventTemplate(WClientUIContextDispatchStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 12002, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WClientUIContextIdle
        {
            add
            {
                source.RegisterEventTemplate(WClientUIContextIdleTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 12006, ProviderGuid);
            }
        }
        public event Action<DispatcherMessage> WClientUIContextPost
        {
            add
            {
                source.RegisterEventTemplate(WClientUIContextPostTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 12003, ProviderGuid);
            }
        }
        public event Action<DispatcherMessage> WClientUIContextPromote
        {
            add
            {
                source.RegisterEventTemplate(WClientUIContextPromoteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 12005, ProviderGuid);
            }
        }
        public event Action<Template_22> WClientUIResponse
        {
            add
            {
                source.RegisterEventTemplate(WClientUIResponseTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11059, ProviderGuid);
            }
        }
        public event Action<PerfElementInfo> WPFElementID
        {
            add
            {
                source.RegisterEventTemplate(WPFElementIDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11, ProviderGuid);
            }
        }
        public event Action<PerfElementName> WPFElementIDElementName
        {
            add
            {
                source.RegisterEventTemplate(WPFElementIDElementNameTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostAbortingActivation
        {
            add
            {
                source.RegisterEventTemplate(WpfHostAbortingActivationTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9080, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostAppDomainManagerCctor
        {
            add
            {
                source.RegisterEventTemplate(WpfHostAppDomainManagerCctorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9059, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostApplicationActivatorCreateInstanceEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostApplicationActivatorCreateInstanceEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9061, ProviderGuid);
            }
        }
        public event Action<URITemplate> WpfHostApplicationActivatorCreateInstanceStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostApplicationActivatorCreateInstanceStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9060, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostAppProxyCtor
        {
            add
            {
                source.RegisterEventTemplate(WpfHostAppProxyCtorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9054, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostAppProxyRunEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostAppProxyRunEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9058, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostAppProxyRunStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostAppProxyRunStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9057, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostAssertAppRequirementsEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostAssertAppRequirementsEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9070, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostAssertAppRequirementsStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostAssertAppRequirementsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9069, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostClickOnceActivationEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostClickOnceActivationEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9051, ProviderGuid);
            }
        }
        public event Action<Template_51> WpfHostClickOnceActivationStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostClickOnceActivationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9050, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostDetermineApplicationTrustEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostDetermineApplicationTrustEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9063, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostDetermineApplicationTrustStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostDetermineApplicationTrustStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9062, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostDocObjHostCreated
        {
            add
            {
                source.RegisterEventTemplate(WpfHostDocObjHostCreatedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9045, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostDocObjHostRunApplicationEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostDocObjHostRunApplicationEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9049, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostDocObjHostRunApplicationStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostDocObjHostRunApplicationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9048, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostDownloadApplicationEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostDownloadApplicationEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9072, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostDownloadApplicationStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostDownloadApplicationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9071, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostDownloadDeplManifestEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostDownloadDeplManifestEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9068, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostDownloadDeplManifestStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostDownloadDeplManifestStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9067, ProviderGuid);
            }
        }
        public event Action<Template_55> WpfHostDownloadProgressUpdate
        {
            add
            {
                source.RegisterEventTemplate(WpfHostDownloadProgressUpdateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9073, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostFirstTimeActivation
        {
            add
            {
                source.RegisterEventTemplate(WpfHostFirstTimeActivationTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9064, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostGetDownloadPageEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostGetDownloadPageEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9066, ProviderGuid);
            }
        }
        public event Action<Template_54> WpfHostGetDownloadPageStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostGetDownloadPageStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9065, ProviderGuid);
            }
        }
        public event Action<Template_50> WpfHostIBHSRunEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostIBHSRunEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9082, ProviderGuid);
            }
        }
        public event Action<Template_49> WpfHostIBHSRunStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostIBHSRunStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9081, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostInitAppProxyEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostInitAppProxyEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9053, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostInitAppProxyStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostInitAppProxyStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9052, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostPostShutdown
        {
            add
            {
                source.RegisterEventTemplate(WpfHostPostShutdownTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9079, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostRootBrowserWindowSetupEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostRootBrowserWindowSetupEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9056, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostRootBrowserWindowSetupStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostRootBrowserWindowSetupStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9055, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmAdHocProfile1End
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmAdHocProfile1EndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9042, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmAdHocProfile1Start
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmAdHocProfile1StartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9041, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmAdHocProfile2End
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmAdHocProfile2EndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9044, ProviderGuid);
            }
        }
        public event Action<Template_45> WpfHostUmAdHocProfile2Start
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmAdHocProfile2StartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9043, ProviderGuid);
            }
        }
        public event Action<Template_44> WpfHostUmBindProgress
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmBindProgressTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9018, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmClassFactoryCreateInstance
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmClassFactoryCreateInstanceTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9008, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmEnteringMessageLoop
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmEnteringMessageLoopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9007, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmIHlinkTargetNavigateEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmIHlinkTargetNavigateEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9026, ProviderGuid);
            }
        }
        public event Action<Template_45> WpfHostUmIHlinkTargetNavigateStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmIHlinkTargetNavigateStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9025, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmInitDocHostEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmInitDocHostEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9029, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmInitDocHostStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmInitDocHostStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9028, ProviderGuid);
            }
        }
        public event Action<Template_43> WpfHostUmInvokingBrowser
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmInvokingBrowserTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9005, ProviderGuid);
            }
        }
        public event Action<Template_43> WpfHostUmIPersistFileLoad
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmIPersistFileLoadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9015, ProviderGuid);
            }
        }
        public event Action<Template_HR> WpfHostUmIPersistMonikerLoadEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmIPersistMonikerLoadEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9017, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmIPersistMonikerLoadStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmIPersistMonikerLoadStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9016, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmLaunchingRestrictedProcess
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmLaunchingRestrictedProcessTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9006, ProviderGuid);
            }
        }
        public event Action<Template_43> WpfHostUmLoadingResourceDLLEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmLoadingResourceDLLEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9035, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmLoadingResourceDLLStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmLoadingResourceDLLStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9034, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmMergingMenusEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmMergingMenusEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9031, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmMergingMenusStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmMergingMenusStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9030, ProviderGuid);
            }
        }
        public event Action<Template_HR> WpfHostUmOleCmdExecEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmOleCmdExecEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9039, ProviderGuid);
            }
        }
        public event Action<Template_47> WpfHostUmOleCmdExecStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmOleCmdExecStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9038, ProviderGuid);
            }
        }
        public event Action<Template_48> WpfHostUmOleCmdQueryStatusEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmOleCmdQueryStatusEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9037, ProviderGuid);
            }
        }
        public event Action<Template_47> WpfHostUmOleCmdQueryStatusStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmOleCmdQueryStatusStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9036, ProviderGuid);
            }
        }
        public event Action<Template_HR> WpfHostUmOnStopBinding
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmOnStopBindingTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9019, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmParsingMarkupVersionEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmParsingMarkupVersionEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9014, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmParsingMarkupVersionStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmParsingMarkupVersionStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9013, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmProgressPageShown
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmProgressPageShownTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9040, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmReadingAppManifestEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmReadingAppManifestEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9012, ProviderGuid);
            }
        }
        public event Action<Template_43> WpfHostUmReadingAppManifestStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmReadingAppManifestStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9011, ProviderGuid);
            }
        }
        public event Action<Template_43> WpfHostUmReadingDeplManifestEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmReadingDeplManifestEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9010, ProviderGuid);
            }
        }
        public event Action<Template_43> WpfHostUmReadingDeplManifestStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmReadingDeplManifestStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9009, ProviderGuid);
            }
        }
        public event Action<Template_46> WpfHostUmReadyStateChanged
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmReadyStateChangedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9027, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmStartingCLREnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmStartingCLREndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9024, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmStartingCLRStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmStartingCLRStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9023, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmUIActivationEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmUIActivationEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9033, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmUIActivationStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmUIActivationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9032, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmVersionActivateEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmVersionActivateEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9022, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmVersionActivateStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmVersionActivateStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9021, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmVersionAttach
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmVersionAttachTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9020, ProviderGuid);
            }
        }
        public event Action<Template_HR> WpfHostUmWinMainEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmWinMainEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9004, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUmWinMainStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUmWinMainStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9003, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUpdateBrowserCommandsEnd
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUpdateBrowserCommandsEndTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9078, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUpdateBrowserCommandsStart
        {
            add
            {
                source.RegisterEventTemplate(WpfHostUpdateBrowserCommandsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9077, ProviderGuid);
            }
        }
        public event Action<Template_53> WpfHostXappLauncherAppExit
        {
            add
            {
                source.RegisterEventTemplate(WpfHostXappLauncherAppExitTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9047, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostXappLauncherAppNavigated
        {
            add
            {
                source.RegisterEventTemplate(WpfHostXappLauncherAppNavigatedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9074, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostXappLauncherAppStartup
        {
            add
            {
                source.RegisterEventTemplate(WpfHostXappLauncherAppStartupTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9046, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private EmptyTraceData AddAnnotationStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3013, 99, "AddAnnotation", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData AddAnnotationStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3014, 99, "AddAnnotation", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData AddAttachedHighlightStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3039, 112, "AddAttachedHighlight", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData AddAttachedHighlightStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3040, 112, "AddAttachedHighlight", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData AddAttachedMHStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3043, 114, "AddAttachedMH", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData AddAttachedMHStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3044, 114, "AddAttachedMH", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData AddAttachedSNStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3035, 110, "AddAttachedSN", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData AddAttachedSNStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3036, 110, "AddAttachedSN", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData AnnotationInkChangedStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3033, 109, "AnnotationInkChanged", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData AnnotationInkChangedStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3034, 109, "AnnotationInkChanged", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData AnnotationTextChangedStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3031, 108, "AnnotationTextChanged", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData AnnotationTextChangedStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3032, 108, "AnnotationTextChanged", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private Template_2 BitmapCopyTemplate(Action<Template_2> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_2(action, 11002, 2, "BitmapCopy", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData ClearHighlightStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3009, 96, "ClearHighlight", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData ClearHighlightStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3010, 96, "ClearHighlight", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private CreateChannel CreateChannelTemplate(Action<CreateChannel> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CreateChannel(action, 11040, 141, "CreateChannel", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CreateHighlightStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3007, 95, "CreateHighlight", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CreateHighlightStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3008, 95, "CreateHighlight", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private CreateOrAddOnChnl CreateOrAddOnChnlTemplate(Action<CreateOrAddOnChnl> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CreateOrAddOnChnl(action, 11041, 139, "CreateOrAddOnChnl", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CreateStickyNoteStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3001, 92, "CreateStickyNote", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CreateStickyNoteStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3002, 92, "CreateStickyNote", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private CreateWpfGfxResource CreateWpfGfxResourceTemplate(Action<CreateWpfGfxResource> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CreateWpfGfxResource(action, 11042, 140, "CreateWpfGfxResource", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DeleteAnnotationStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3015, 100, "DeleteAnnotation", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DeleteAnnotationStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3016, 100, "DeleteAnnotation", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DeleteInkNoteStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3005, 94, "DeleteInkNote", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DeleteInkNoteStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3006, 94, "DeleteInkNote", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DeleteTextNoteStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3003, 93, "DeleteTextNote", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DeleteTextNoteStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3004, 93, "DeleteTextNote", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DeserializeAnnotationStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3025, 105, "DeserializeAnnotation", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DeserializeAnnotationStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3026, 105, "DeserializeAnnotation", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private Template_1 DrawBitmapTemplate(Action<Template_1> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_1(action, 11001, 1, "DrawBitmap", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private FloatBounds DWMDraw_Template(Action<FloatBounds> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FloatBounds(action, 11022, 8, "DWMDraw_", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private FloatBounds DWMDraw_BeginLayerEndTemplate(Action<FloatBounds> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FloatBounds(action, 11017, 8, "DWMDraw_", Guid.Empty, 69, "BeginLayerEnd", ProviderGuid, ProviderName );
        }
        static private FloatBounds DWMDraw_BeginLayerStartTemplate(Action<FloatBounds> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FloatBounds(action, 11016, 8, "DWMDraw_", Guid.Empty, 68, "BeginLayerStart", ProviderGuid, ProviderName );
        }
        static private Template_6 DWMDraw_BitmapEndTemplate(Action<Template_6> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_6(action, 11007, 8, "DWMDraw_", Guid.Empty, 57, "BitmapEnd", ProviderGuid, ProviderName );
        }
        static private Template_6 DWMDraw_BitmapStartTemplate(Action<Template_6> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_6(action, 11006, 8, "DWMDraw_", Guid.Empty, 56, "BitmapStart", ProviderGuid, ProviderName );
        }
        static private FloatBounds DWMDraw_ClearStartTemplate(Action<FloatBounds> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FloatBounds(action, 11004, 5, "DWMDraw_Clear", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DWMDraw_ClearStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 11005, 5, "DWMDraw_Clear", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private Template_6 DWMDraw_ClippedBitmapEndTemplate(Action<Template_6> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_6(action, 11021, 8, "DWMDraw_", Guid.Empty, 79, "ClippedBitmapEnd", ProviderGuid, ProviderName );
        }
        static private Template_6 DWMDraw_ClippedBitmapStartTemplate(Action<Template_6> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_6(action, 11020, 8, "DWMDraw_", Guid.Empty, 78, "ClippedBitmapStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DWMDraw_EndLayerEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 11019, 8, "DWMDraw_", Guid.Empty, 71, "EndLayerEnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DWMDraw_EndLayerStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 11018, 8, "DWMDraw_", Guid.Empty, 70, "EndLayerStart", ProviderGuid, ProviderName );
        }
        static private Template_6 DWMDraw_GeometryEndTemplate(Action<Template_6> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_6(action, 11011, 8, "DWMDraw_", Guid.Empty, 61, "GeometryEnd", ProviderGuid, ProviderName );
        }
        static private Template_6 DWMDraw_GeometryStartTemplate(Action<Template_6> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_6(action, 11010, 8, "DWMDraw_", Guid.Empty, 60, "GeometryStart", ProviderGuid, ProviderName );
        }
        static private Template_6 DWMDraw_GlyphRunEndTemplate(Action<Template_6> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_6(action, 11015, 8, "DWMDraw_", Guid.Empty, 65, "GlyphRunEnd", ProviderGuid, ProviderName );
        }
        static private Template_6 DWMDraw_GlyphRunStartTemplate(Action<Template_6> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_6(action, 11014, 8, "DWMDraw_", Guid.Empty, 64, "GlyphRunStart", ProviderGuid, ProviderName );
        }
        static private Template_6 DWMDraw_ImageEndTemplate(Action<Template_6> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_6(action, 11013, 8, "DWMDraw_", Guid.Empty, 63, "ImageEnd", ProviderGuid, ProviderName );
        }
        static private Template_6 DWMDraw_ImageStartTemplate(Action<Template_6> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_6(action, 11012, 8, "DWMDraw_", Guid.Empty, 62, "ImageStart", ProviderGuid, ProviderName );
        }
        static private Template_6 DWMDraw_RectangleEndTemplate(Action<Template_6> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_6(action, 11009, 8, "DWMDraw_", Guid.Empty, 59, "RectangleEnd", ProviderGuid, ProviderName );
        }
        static private Template_6 DWMDraw_RectangleStartTemplate(Action<Template_6> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_6(action, 11008, 8, "DWMDraw_", Guid.Empty, 58, "RectangleStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData GetAnnotationByIdStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3017, 101, "GetAnnotationById", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData GetAnnotationByIdStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3018, 101, "GetAnnotationById", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData GetAnnotationByLocStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3019, 102, "GetAnnotationByLoc", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData GetAnnotationByLocStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3020, 102, "GetAnnotationByLoc", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData GetAnnotationsStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3021, 103, "GetAnnotations", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData GetAnnotationsStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3022, 103, "GetAnnotations", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData LayerEventStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 11023, 9, "LayerEvent", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData LayerEventStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 11024, 9, "LayerEvent", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData LoadAnnotationsStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3011, 97, "LoadAnnotations", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData LoadAnnotationsStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3012, 97, "LoadAnnotations", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private ID32Template ManipulationEventRaisedTemplate(Action<ID32Template> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ID32Template(action, 2007, 137, "ManipulationEventRaised", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private ID32Template ManipulationReportFrameTemplate(Action<ID32Template> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ID32Template(action, 2006, 136, "ManipulationReportFrame", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData NavigationNavigationAsyncWorkItemTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9083, 118, "Navigation", Guid.Empty, 11, "NavigationAsyncWorkItem", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData NavigationNavigationContentRenderedTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9086, 118, "Navigation", Guid.Empty, 15, "NavigationContentRendered", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData NavigationNavigationEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9085, 118, "Navigation", Guid.Empty, 14, "NavigationEnd", ProviderGuid, ProviderName );
        }
        static private URITemplate NavigationNavigationLaunchBrowserTemplate(Action<URITemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new URITemplate(action, 9088, 118, "Navigation", Guid.Empty, 13, "NavigationLaunchBrowser", ProviderGuid, ProviderName );
        }
        static private Template_57 NavigationNavigationPageFunctionReturnTemplate(Action<Template_57> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_57(action, 9089, 118, "Navigation", Guid.Empty, 16, "NavigationPageFunctionReturn", ProviderGuid, ProviderName );
        }
        static private Template_56 NavigationNavigationStartTemplate(Action<Template_56> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_56(action, 9087, 118, "Navigation", Guid.Empty, 10, "NavigationStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData NavigationNavigationWebResponseReceivedTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9084, 118, "Navigation", Guid.Empty, 12, "NavigationWebResponseReceived", ProviderGuid, ProviderName );
        }
        static private ID32Template PenThreadPoolThreadAcquisitionTemplate(Action<ID32Template> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ID32Template(action, 2008, 147, "PenThreadPoolThreadAcquisition", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private ReleaseOnChannel ReleaseOnChannelTemplate(Action<ReleaseOnChannel> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ReleaseOnChannel(action, 11043, 142, "ReleaseOnChannel", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData RemoveAttachedHighlightStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3041, 113, "RemoveAttachedHighlight", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData RemoveAttachedHighlightStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3042, 113, "RemoveAttachedHighlight", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData RemoveAttachedMHStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3045, 115, "RemoveAttachedMH", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData RemoveAttachedMHStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3046, 115, "RemoveAttachedMH", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData RemoveAttachedSNStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3037, 111, "RemoveAttachedSN", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData RemoveAttachedSNStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3038, 111, "RemoveAttachedSN", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData SerializeAnnotationStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3023, 104, "SerializeAnnotation", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData SerializeAnnotationStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3024, 104, "SerializeAnnotation", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private IntBounds SetClipTemplate(Action<IntBounds> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IntBounds(action, 11003, 3, "SetClip", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private ID32Template StylusEventQueuedTemplate(Action<ID32Template> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ID32Template(action, 2002, 132, "StylusEventQueued", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private ID32Template TouchDownReportedTemplate(Action<ID32Template> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ID32Template(action, 2003, 133, "TouchDownReported", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private ID32Template TouchMoveReportedTemplate(Action<ID32Template> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ID32Template(action, 2004, 134, "TouchMoveReported", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private ID32Template TouchUpReportedTemplate(Action<ID32Template> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ID32Template(action, 2005, 135, "TouchUpReported", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private GfxSoftwareFallback UnexpectedSoftwareFallbackTemplate(Action<GfxSoftwareFallback> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GfxSoftwareFallback(action, 11044, 128, "UnexpectedSoftwareFallback", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData UpdateAnnotationWithSNCStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3027, 106, "UpdateAnnotationWithSNC", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData UpdateAnnotationWithSNCStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3028, 106, "UpdateAnnotationWithSNC", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData UpdateSNCWithAnnotationStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3029, 107, "UpdateSNCWithAnnotation", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData UpdateSNCWithAnnotationStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3030, 107, "UpdateSNCWithAnnotation", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData UpdateVisualStateStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 8, 129, "UpdateVisualState", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData UpdateVisualStateStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9, 129, "UpdateVisualState", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private VisualCacheTemplate VisualCacheAllocTemplate(Action<VisualCacheTemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VisualCacheTemplate(action, 11038, 130, "VisualCacheAlloc", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private VisualCacheTemplate VisualCacheUpdateTemplate(Action<VisualCacheTemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VisualCacheTemplate(action, 11039, 131, "VisualCacheUpdate", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private PerfElementID WClientAnimRenderHandlerStartTemplate(Action<PerfElementID> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PerfElementID(action, 11049, 31, "WClientAnimRenderHandler", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientAnimRenderHandlerStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 11050, 31, "WClientAnimRenderHandler", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientAppCtorTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 2, 48, "WClientAppCtor", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientAppRunTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 3, 49, "WClientAppRun", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private LayoutAborted WClientArrangeArrangeAbortTemplate(Action<LayoutAborted> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LayoutAborted(action, 7011, 27, "WClientArrange", Guid.Empty, 10, "ArrangeAbort", ProviderGuid, ProviderName );
        }
        static private ArrangeData WClientArrangeArrangeElementBeginTemplate(Action<ArrangeData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ArrangeData(action, 7013, 27, "WClientArrange", Guid.Empty, 11, "ArrangeElementBegin", ProviderGuid, ProviderName );
        }
        static private ArrangeData WClientArrangeArrangeElementEndTemplate(Action<ArrangeData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ArrangeData(action, 7014, 27, "WClientArrange", Guid.Empty, 12, "ArrangeElementEnd", ProviderGuid, ProviderName );
        }
        static private PerfElementID WClientArrangeStartTemplate(Action<PerfElementID> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PerfElementID(action, 7010, 27, "WClientArrange", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private Counter WClientArrangeStopTemplate(Action<Counter> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Counter(action, 7012, 27, "WClientArrange", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private PerfElementID WClientCompileSceneStartTemplate(Action<PerfElementID> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PerfElementID(action, 11057, 36, "WClientCompileScene", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientCompileSceneStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 11058, 36, "WClientCompileScene", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private CreateIRT WClientCreateIRTTemplate(Action<CreateIRT> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CreateIRT(action, 11065, 145, "WClientCreateIRT", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Template_18 WClientCreateVisualTemplate(Action<Template_18> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_18(action, 1, 28, "WClientCreateVisual", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private HwndTemplate WClientDesktopRTCreateStartTemplate(Action<HwndTemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HwndTemplate(action, 11025, 12, "WClientDesktopRTCreate", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private HwndTemplate WClientDesktopRTCreateStopTemplate(Action<HwndTemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HwndTemplate(action, 11026, 12, "WClientDesktopRTCreate", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXAlphaFlattenStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5030, 70, "WClientDRXAlphaFlatten", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXAlphaFlattenStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5031, 70, "WClientDRXAlphaFlatten", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXCommitPageStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5042, 76, "WClientDRXCommitPage", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXCommitPageStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5043, 76, "WClientDRXCommitPage", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXConvertFontStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5044, 77, "WClientDRXConvertFont", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXConvertFontStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5045, 77, "WClientDRXConvertFont", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXConvertImageStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5046, 78, "WClientDRXConvertImage", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXConvertImageStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5047, 78, "WClientDRXConvertImage", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXEndDocStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5036, 73, "WClientDRXEndDoc", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXEndDocStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5037, 73, "WClientDRXEndDoc", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXEndPageStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5040, 75, "WClientDRXEndPage", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXEndPageStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5041, 75, "WClientDRXEndPage", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXEnsureOMStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5026, 67, "WClientDRXEnsureOM", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXEnsureOMStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5027, 67, "WClientDRXEnsureOM", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXFindStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5023, 65, "WClientDRXFind", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXFindStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5024, 65, "WClientDRXFind", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXFlushPageStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5001, 121, "WClientDRXFlushPage", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXFlushPageStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5002, 121, "WClientDRXFlushPage", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXGetDevModeStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5032, 71, "WClientDRXGetDevMode", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXGetDevModeStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5033, 71, "WClientDRXGetDevMode", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXGetPageStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5058, 68, "WClientDRXGetPage", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXGetPageStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5059, 68, "WClientDRXGetPage", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXGetPrintCapStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5009, 125, "WClientDRXGetPrintCap", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXGetPrintCapStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5010, 125, "WClientDRXGetPrintCap", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXGetStreamStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5017, 55, "WClientDRXGetStream", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXGetStreamStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5018, 55, "WClientDRXGetStream", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXGetVisualStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5005, 122, "WClientDRXGetVisual", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXGetVisualStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5006, 122, "WClientDRXGetVisual", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXInstantiatedTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5065, 63, "WClientDRXInstantiated", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXInvalidateViewTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5021, 58, "WClientDRXInvalidateView", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXLayoutStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5063, 62, "WClientDRXLayout", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXLayoutStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5064, 62, "WClientDRXLayout", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private Template_33 WClientDRXLineDownTemplate(Action<Template_33> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_33(action, 5060, 59, "WClientDRXLineDown", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXLoadPrimitiveStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5050, 80, "WClientDRXLoadPrimitive", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXLoadPrimitiveStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5051, 80, "WClientDRXLoadPrimitive", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXOpenPackageStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5015, 53, "WClientDRXOpenPackage", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXOpenPackageStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5016, 53, "WClientDRXOpenPackage", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private Template_33 WClientDRXPageDownTemplate(Action<Template_33> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_33(action, 5061, 60, "WClientDRXPageDown", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Template_34 WClientDRXPageJumpTemplate(Action<Template_34> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_34(action, 5062, 61, "WClientDRXPageJump", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Template_32 WClientDRXPageLoadedTemplate(Action<Template_32> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_32(action, 5020, 57, "WClientDRXPageLoaded", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Template_31 WClientDRXPageVisibleTemplate(Action<Template_31> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_31(action, 5019, 56, "WClientDRXPageVisible", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXPTProviderStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5011, 126, "WClientDRXPTProvider", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXPTProviderStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5012, 126, "WClientDRXPTProvider", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXRasterStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5013, 127, "WClientDRXRaster", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXRasterStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5014, 127, "WClientDRXRaster", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private Counter WClientDRXReadStreamStartTemplate(Action<Counter> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Counter(action, 5056, 54, "WClientDRXReadStream", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private Template_30 WClientDRXReadStreamStopTemplate(Action<Template_30> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_30(action, 5057, 54, "WClientDRXReadStream", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXReleaseWriterStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5007, 124, "WClientDRXReleaseWriter", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXReleaseWriterStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5008, 124, "WClientDRXReleaseWriter", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXSavePageStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5052, 81, "WClientDRXSavePage", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXSavePageStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5053, 81, "WClientDRXSavePage", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXSaveXpsStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5048, 79, "WClientDRXSaveXps", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXSaveXpsStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5049, 79, "WClientDRXSaveXps", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXSerializationStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5054, 82, "WClientDRXSerialization", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXSerializationStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5055, 82, "WClientDRXSerialization", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXSerializeTreeStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5003, 123, "WClientDRXSerializeTree", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXSerializeTreeStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5004, 123, "WClientDRXSerializeTree", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXStartDocStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5034, 72, "WClientDRXStartDoc", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXStartDocStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5035, 72, "WClientDRXStartDoc", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXStartPageStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5038, 74, "WClientDRXStartPage", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXStartPageStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5039, 74, "WClientDRXStartPage", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXStyleCreatedTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5022, 64, "WClientDRXStyleCreated", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXTreeFlattenStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5028, 69, "WClientDRXTreeFlatten", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientDRXTreeFlattenStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 5029, 69, "WClientDRXTreeFlatten", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private Template_35 WClientDRXZoomTemplate(Action<Template_35> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_35(action, 5025, 66, "WClientDRXZoom", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientFontCacheTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 1001, 52, "WClientFontCache", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Template_19 WClientInputMessageTemplate(Action<Template_19> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_19(action, 2001, 29, "WClientInputMessage", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientInterlockedRenderStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 11045, 138, "WClientInterlockedRender", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientInterlockedRenderStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 11046, 138, "WClientInterlockedRender", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private LayoutAborted WClientLayoutAbortTemplate(Action<LayoutAborted> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LayoutAborted(action, 7015, 25, "WClientLayout", Guid.Empty, 10, "Abort", ProviderGuid, ProviderName );
        }
        static private PerfElementID WClientLayoutExceptionTemplate(Action<PerfElementID> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PerfElementID(action, 7022, 25, "WClientLayout", Guid.Empty, 17, "Exception", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientLayoutFireAutomationEventsBeginTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 7020, 25, "WClientLayout", Guid.Empty, 15, "FireAutomationEventsBegin", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientLayoutFireAutomationEventsEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 7021, 25, "WClientLayout", Guid.Empty, 16, "FireAutomationEventsEnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientLayoutFireLayoutUpdatedBeginTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 7018, 25, "WClientLayout", Guid.Empty, 13, "FireLayoutUpdatedBegin", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientLayoutFireLayoutUpdatedEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 7019, 25, "WClientLayout", Guid.Empty, 14, "FireLayoutUpdatedEnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientLayoutFireSizeChangedBeginTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 7016, 25, "WClientLayout", Guid.Empty, 11, "FireSizeChangedBegin", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientLayoutFireSizeChangedEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 7017, 25, "WClientLayout", Guid.Empty, 12, "FireSizeChangedEnd", ProviderGuid, ProviderName );
        }
        static private PerfElementID WClientLayoutInvalidatedTemplate(Action<PerfElementID> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PerfElementID(action, 7023, 25, "WClientLayout", Guid.Empty, 18, "Invalidated", ProviderGuid, ProviderName );
        }
        static private LayoutSourceTemplate WClientLayoutStartTemplate(Action<LayoutSourceTemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LayoutSourceTemplate(action, 7001, 25, "WClientLayout", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientLayoutStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 7002, 25, "WClientLayout", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private LayoutAborted WClientMeasureMeasureAbortTemplate(Action<LayoutAborted> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LayoutAborted(action, 7006, 26, "WClientMeasure", Guid.Empty, 10, "MeasureAbort", ProviderGuid, ProviderName );
        }
        static private MeasureData WClientMeasureMeasureElementBeginTemplate(Action<MeasureData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MeasureData(action, 7008, 26, "WClientMeasure", Guid.Empty, 11, "MeasureElementBegin", ProviderGuid, ProviderName );
        }
        static private MeasureData WClientMeasureMeasureElementEndTemplate(Action<MeasureData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MeasureData(action, 7009, 26, "WClientMeasure", Guid.Empty, 12, "MeasureElementEnd", ProviderGuid, ProviderName );
        }
        static private PerfElementID WClientMeasureStartTemplate(Action<PerfElementID> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PerfElementID(action, 7005, 26, "WClientMeasure", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private Counter WClientMeasureStopTemplate(Action<Counter> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Counter(action, 7007, 26, "WClientMeasure", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private Template_20 WClientMediaRenderStartTemplate(Action<Template_20> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_20(action, 11051, 32, "WClientMediaRender", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientMediaRenderStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 11052, 32, "WClientMediaRender", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private PerfElementID WClientOnRenderStartTemplate(Action<PerfElementID> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PerfElementID(action, 11063, 120, "WClientOnRender", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private PerfElementID WClientOnRenderStopTemplate(Action<PerfElementID> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PerfElementID(action, 11064, 120, "WClientOnRender", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private URITemplate WClientParseBamlStartTemplate(Action<URITemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new URITemplate(action, 4001, 41, "WClientParseBaml", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private URITemplate WClientParseBamlStopTemplate(Action<URITemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new URITemplate(action, 4002, 41, "WClientParseBaml", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientParseFefCrInstStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 4005, 44, "WClientParseFefCrInst", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientParseFefCrInstStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 4006, 44, "WClientParseFefCrInst", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientParseInstVisTreeStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 4007, 45, "WClientParseInstVisTree", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private MessageStringTemplate WClientParseInstVisTreeStopTemplate(Action<MessageStringTemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MessageStringTemplate(action, 4008, 45, "WClientParseInstVisTree", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientParseRdrCrInFTypStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 4011, 47, "WClientParseRdrCrInFTyp", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private TypeStringTemplate WClientParseRdrCrInFTypStopTemplate(Action<TypeStringTemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new TypeStringTemplate(action, 4012, 47, "WClientParseRdrCrInFTyp", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientParseRdrCrInstStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 4009, 46, "WClientParseRdrCrInst", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientParseRdrCrInstStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 4010, 46, "WClientParseRdrCrInst", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private WClientParseXamlBamlInfoTemplate WClientParseXamlBamlInfoTemplate(Action<WClientParseXamlBamlInfoTemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WClientParseXamlBamlInfoTemplate(action, 4021, 144, "WClientParseXamlBamlInfo", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private URITemplate WClientParseXamlStartTemplate(Action<URITemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new URITemplate(action, 4020, 42, "WClientParseXaml", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private URITemplate WClientParseXamlStopTemplate(Action<URITemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new URITemplate(action, 4022, 42, "WClientParseXaml", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private URITemplate WClientParseXmlStartTemplate(Action<URITemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new URITemplate(action, 4003, 43, "WClientParseXml", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private URITemplate WClientParseXmlStopTemplate(Action<URITemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new URITemplate(action, 4004, 43, "WClientParseXml", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientPostRenderTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 11053, 33, "WClientPostRender", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private PtrTemplate WClientPotentialIRTResourceTemplate(Action<PtrTemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PtrTemplate(action, 11066, 146, "WClientPotentialIRTResource", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private PerfElementID WClientPrecomputeSceneStartTemplate(Action<PerfElementID> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PerfElementID(action, 11055, 35, "WClientPrecomputeScene", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientPrecomputeSceneStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 11056, 35, "WClientPrecomputeScene", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private Template_37 WClientPropParentCheckTemplate(Action<Template_37> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_37(action, 7, 85, "WClientPropParentCheck", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Template_21 WClientQPCFrequencyTemplate(Action<Template_21> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_21(action, 11054, 34, "WClientQPCFrequency", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private PerfElementID WClientRenderHandlerStartTemplate(Action<PerfElementID> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PerfElementID(action, 11047, 30, "WClientRenderHandler", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientRenderHandlerStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 11048, 30, "WClientRenderHandler", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private AssemblyNameTemplate WClientResourceBamlAssemblyTemplate(Action<AssemblyNameTemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AssemblyNameTemplate(action, 4019, 91, "WClientResourceBamlAssembly", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientResourceCacheMissTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 4017, 89, "WClientResourceCacheMiss", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientResourceCacheNullTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 4016, 88, "WClientResourceCacheNull", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientResourceCacheValueTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 4015, 87, "WClientResourceCacheValue", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private KeyStringTemplate WClientResourceFindStartTemplate(Action<KeyStringTemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new KeyStringTemplate(action, 4013, 86, "WClientResourceFind", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientResourceFindStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 4014, 86, "WClientResourceFind", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private KeyStringTemplate WClientResourceStockTemplate(Action<KeyStringTemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new KeyStringTemplate(action, 4018, 90, "WClientResourceStock", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Template_24 WClientScheduleRenderTemplate(Action<Template_24> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_24(action, 11062, 40, "WClientScheduleRender", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private InfoStringTemplate WClientStringTemplate(Action<InfoStringTemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new InfoStringTemplate(action, 4, 51, "WClientString", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private InfoStringTemplate WClientStringStartTemplate(Action<InfoStringTemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new InfoStringTemplate(action, 5, 51, "WClientString", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private InfoStringTemplate WClientStringStopTemplate(Action<InfoStringTemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new InfoStringTemplate(action, 6, 51, "WClientString", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private TimeTick WClientTimeManagerTickStartTemplate(Action<TimeTick> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new TimeTick(action, 6001, 50, "WClientTimeManagerTick", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientTimeManagerTickStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 6002, 50, "WClientTimeManagerTick", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private Template_15 WClientUceCheckDeviceStateTemplate(Action<Template_15> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_15(action, 11037, 19, "WClientUceCheckDeviceState", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Template_23 WClientUceNotifyPresentTemplate(Action<Template_23> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_23(action, 11061, 39, "WClientUceNotifyPresent", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Template_10 WClientUcePrecomputeStartTemplate(Action<Template_10> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_10(action, 11030, 14, "WClientUcePrecompute", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private Template_10 WClientUcePrecomputeStopTemplate(Action<Template_10> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_10(action, 11031, 14, "WClientUcePrecompute", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private Template_12 WClientUcePresentStartTemplate(Action<Template_12> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_12(action, 11034, 16, "WClientUcePresent", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private Template_12 WClientUcePresentStopTemplate(Action<Template_12> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_12(action, 11035, 16, "WClientUcePresent", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private Template_11 WClientUceProcessQueueTemplate(Action<Template_11> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_11(action, 11029, 13, "WClientUceProcessQueue", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Template_10 WClientUceProcessQueueStartTemplate(Action<Template_10> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_10(action, 11027, 13, "WClientUceProcessQueue", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private Template_10 WClientUceProcessQueueStopTemplate(Action<Template_10> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_10(action, 11028, 13, "WClientUceProcessQueue", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private Template_10 WClientUceRenderStartTemplate(Action<Template_10> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_10(action, 11032, 15, "WClientUceRender", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private Template_10 WClientUceRenderStopTemplate(Action<Template_10> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_10(action, 11033, 15, "WClientUceRender", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private Template_13 WClientUceResponseTemplate(Action<Template_13> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_13(action, 11036, 17, "WClientUceResponse", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private ID32Template WClientUICommitChannelTemplate(Action<ID32Template> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ID32Template(action, 11060, 38, "WClientUICommitChannel", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DispatcherMessage WClientUIContextAbortTemplate(Action<DispatcherMessage> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DispatcherMessage(action, 12004, 22, "WClientUIContextAbort", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DispatcherMessage WClientUIContextDispatchStartTemplate(Action<DispatcherMessage> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DispatcherMessage(action, 12001, 20, "WClientUIContextDispatch", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientUIContextDispatchStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 12002, 20, "WClientUIContextDispatch", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WClientUIContextIdleTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 12006, 24, "WClientUIContextIdle", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DispatcherMessage WClientUIContextPostTemplate(Action<DispatcherMessage> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DispatcherMessage(action, 12003, 21, "WClientUIContextPost", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DispatcherMessage WClientUIContextPromoteTemplate(Action<DispatcherMessage> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DispatcherMessage(action, 12005, 23, "WClientUIContextPromote", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Template_22 WClientUIResponseTemplate(Action<Template_22> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_22(action, 11059, 37, "WClientUIResponse", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private PerfElementInfo WPFElementIDTemplate(Action<PerfElementInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PerfElementInfo(action, 11, 143, "WPFElementID", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private PerfElementName WPFElementIDElementNameTemplate(Action<PerfElementName> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PerfElementName(action, 10, 143, "WPFElementID", Guid.Empty, 10, "ElementName", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostAbortingActivationTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9080, 117, "WpfHost", Guid.Empty, 81, "AbortingActivation", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostAppDomainManagerCctorTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9059, 117, "WpfHost", Guid.Empty, 40, "AppDomainManagerCctor", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostApplicationActivatorCreateInstanceEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9061, 117, "WpfHost", Guid.Empty, 42, "ApplicationActivatorCreateInstanceEnd", ProviderGuid, ProviderName );
        }
        static private URITemplate WpfHostApplicationActivatorCreateInstanceStartTemplate(Action<URITemplate> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new URITemplate(action, 9060, 117, "WpfHost", Guid.Empty, 41, "ApplicationActivatorCreateInstanceStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostAppProxyCtorTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9054, 117, "WpfHost", Guid.Empty, 30, "AppProxyCtor", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostAppProxyRunEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9058, 117, "WpfHost", Guid.Empty, 34, "AppProxyRunEnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostAppProxyRunStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9057, 117, "WpfHost", Guid.Empty, 33, "AppProxyRunStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostAssertAppRequirementsEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9070, 117, "WpfHost", Guid.Empty, 56, "AssertAppRequirementsEnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostAssertAppRequirementsStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9069, 117, "WpfHost", Guid.Empty, 55, "AssertAppRequirementsStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostClickOnceActivationEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9051, 117, "WpfHost", Guid.Empty, 18, "ClickOnceActivationEnd", ProviderGuid, ProviderName );
        }
        static private Template_51 WpfHostClickOnceActivationStartTemplate(Action<Template_51> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_51(action, 9050, 117, "WpfHost", Guid.Empty, 17, "ClickOnceActivationStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostDetermineApplicationTrustEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9063, 117, "WpfHost", Guid.Empty, 44, "DetermineApplicationTrustEnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostDetermineApplicationTrustStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9062, 117, "WpfHost", Guid.Empty, 43, "DetermineApplicationTrustStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostDocObjHostCreatedTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9045, 117, "WpfHost", Guid.Empty, 10, "DocObjHostCreated", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostDocObjHostRunApplicationEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9049, 117, "WpfHost", Guid.Empty, 16, "DocObjHostRunApplicationEnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostDocObjHostRunApplicationStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9048, 117, "WpfHost", Guid.Empty, 15, "DocObjHostRunApplicationStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostDownloadApplicationEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9072, 117, "WpfHost", Guid.Empty, 58, "DownloadApplicationEnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostDownloadApplicationStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9071, 117, "WpfHost", Guid.Empty, 57, "DownloadApplicationStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostDownloadDeplManifestEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9068, 117, "WpfHost", Guid.Empty, 54, "DownloadDeplManifestEnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostDownloadDeplManifestStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9067, 117, "WpfHost", Guid.Empty, 53, "DownloadDeplManifestStart", ProviderGuid, ProviderName );
        }
        static private Template_55 WpfHostDownloadProgressUpdateTemplate(Action<Template_55> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_55(action, 9073, 117, "WpfHost", Guid.Empty, 59, "DownloadProgressUpdate", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostFirstTimeActivationTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9064, 117, "WpfHost", Guid.Empty, 50, "FirstTimeActivation", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostGetDownloadPageEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9066, 117, "WpfHost", Guid.Empty, 52, "GetDownloadPageEnd", ProviderGuid, ProviderName );
        }
        static private Template_54 WpfHostGetDownloadPageStartTemplate(Action<Template_54> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_54(action, 9065, 117, "WpfHost", Guid.Empty, 51, "GetDownloadPageStart", ProviderGuid, ProviderName );
        }
        static private Template_50 WpfHostIBHSRunEndTemplate(Action<Template_50> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_50(action, 9082, 117, "WpfHost", Guid.Empty, 12, "IBHSRunEnd", ProviderGuid, ProviderName );
        }
        static private Template_49 WpfHostIBHSRunStartTemplate(Action<Template_49> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_49(action, 9081, 117, "WpfHost", Guid.Empty, 11, "IBHSRunStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostInitAppProxyEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9053, 117, "WpfHost", Guid.Empty, 20, "InitAppProxyEnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostInitAppProxyStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9052, 117, "WpfHost", Guid.Empty, 19, "InitAppProxyStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostPostShutdownTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9079, 117, "WpfHost", Guid.Empty, 80, "PostShutdown", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostRootBrowserWindowSetupEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9056, 117, "WpfHost", Guid.Empty, 32, "RootBrowserWindowSetupEnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostRootBrowserWindowSetupStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9055, 117, "WpfHost", Guid.Empty, 31, "RootBrowserWindowSetupStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmAdHocProfile1EndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9042, 116, "WpfHostUm", Guid.Empty, 153, "AdHocProfile1End", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmAdHocProfile1StartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9041, 116, "WpfHostUm", Guid.Empty, 152, "AdHocProfile1Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmAdHocProfile2EndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9044, 116, "WpfHostUm", Guid.Empty, 155, "AdHocProfile2End", ProviderGuid, ProviderName );
        }
        static private Template_45 WpfHostUmAdHocProfile2StartTemplate(Action<Template_45> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_45(action, 9043, 116, "WpfHostUm", Guid.Empty, 154, "AdHocProfile2Start", ProviderGuid, ProviderName );
        }
        static private Template_44 WpfHostUmBindProgressTemplate(Action<Template_44> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_44(action, 9018, 116, "WpfHostUm", Guid.Empty, 53, "BindProgress", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmClassFactoryCreateInstanceTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9008, 116, "WpfHostUm", Guid.Empty, 35, "ClassFactoryCreateInstance", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmEnteringMessageLoopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9007, 116, "WpfHostUm", Guid.Empty, 34, "EnteringMessageLoop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmIHlinkTargetNavigateEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9026, 116, "WpfHostUm", Guid.Empty, 96, "IHlinkTargetNavigateEnd", ProviderGuid, ProviderName );
        }
        static private Template_45 WpfHostUmIHlinkTargetNavigateStartTemplate(Action<Template_45> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_45(action, 9025, 116, "WpfHostUm", Guid.Empty, 95, "IHlinkTargetNavigateStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmInitDocHostEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9029, 116, "WpfHostUm", Guid.Empty, 99, "InitDocHostEnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmInitDocHostStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9028, 116, "WpfHostUm", Guid.Empty, 98, "InitDocHostStart", ProviderGuid, ProviderName );
        }
        static private Template_43 WpfHostUmInvokingBrowserTemplate(Action<Template_43> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_43(action, 9005, 116, "WpfHostUm", Guid.Empty, 32, "InvokingBrowser", ProviderGuid, ProviderName );
        }
        static private Template_43 WpfHostUmIPersistFileLoadTemplate(Action<Template_43> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_43(action, 9015, 116, "WpfHostUm", Guid.Empty, 50, "IPersistFileLoad", ProviderGuid, ProviderName );
        }
        static private Template_HR WpfHostUmIPersistMonikerLoadEndTemplate(Action<Template_HR> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_HR(action, 9017, 116, "WpfHostUm", Guid.Empty, 52, "IPersistMonikerLoadEnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmIPersistMonikerLoadStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9016, 116, "WpfHostUm", Guid.Empty, 51, "IPersistMonikerLoadStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmLaunchingRestrictedProcessTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9006, 116, "WpfHostUm", Guid.Empty, 33, "LaunchingRestrictedProcess", ProviderGuid, ProviderName );
        }
        static private Template_43 WpfHostUmLoadingResourceDLLEndTemplate(Action<Template_43> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_43(action, 9035, 116, "WpfHostUm", Guid.Empty, 105, "LoadingResourceDLLEnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmLoadingResourceDLLStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9034, 116, "WpfHostUm", Guid.Empty, 104, "LoadingResourceDLLStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmMergingMenusEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9031, 116, "WpfHostUm", Guid.Empty, 101, "MergingMenusEnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmMergingMenusStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9030, 116, "WpfHostUm", Guid.Empty, 100, "MergingMenusStart", ProviderGuid, ProviderName );
        }
        static private Template_HR WpfHostUmOleCmdExecEndTemplate(Action<Template_HR> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_HR(action, 9039, 116, "WpfHostUm", Guid.Empty, 109, "OleCmdExecEnd", ProviderGuid, ProviderName );
        }
        static private Template_47 WpfHostUmOleCmdExecStartTemplate(Action<Template_47> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_47(action, 9038, 116, "WpfHostUm", Guid.Empty, 108, "OleCmdExecStart", ProviderGuid, ProviderName );
        }
        static private Template_48 WpfHostUmOleCmdQueryStatusEndTemplate(Action<Template_48> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_48(action, 9037, 116, "WpfHostUm", Guid.Empty, 107, "OleCmdQueryStatusEnd", ProviderGuid, ProviderName );
        }
        static private Template_47 WpfHostUmOleCmdQueryStatusStartTemplate(Action<Template_47> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_47(action, 9036, 116, "WpfHostUm", Guid.Empty, 106, "OleCmdQueryStatusStart", ProviderGuid, ProviderName );
        }
        static private Template_HR WpfHostUmOnStopBindingTemplate(Action<Template_HR> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_HR(action, 9019, 116, "WpfHostUm", Guid.Empty, 54, "OnStopBinding", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmParsingMarkupVersionEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9014, 116, "WpfHostUm", Guid.Empty, 45, "ParsingMarkupVersionEnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmParsingMarkupVersionStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9013, 116, "WpfHostUm", Guid.Empty, 44, "ParsingMarkupVersionStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmProgressPageShownTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9040, 116, "WpfHostUm", Guid.Empty, 110, "ProgressPageShown", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmReadingAppManifestEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9012, 116, "WpfHostUm", Guid.Empty, 43, "ReadingAppManifestEnd", ProviderGuid, ProviderName );
        }
        static private Template_43 WpfHostUmReadingAppManifestStartTemplate(Action<Template_43> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_43(action, 9011, 116, "WpfHostUm", Guid.Empty, 42, "ReadingAppManifestStart", ProviderGuid, ProviderName );
        }
        static private Template_43 WpfHostUmReadingDeplManifestEndTemplate(Action<Template_43> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_43(action, 9010, 116, "WpfHostUm", Guid.Empty, 41, "ReadingDeplManifestEnd", ProviderGuid, ProviderName );
        }
        static private Template_43 WpfHostUmReadingDeplManifestStartTemplate(Action<Template_43> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_43(action, 9009, 116, "WpfHostUm", Guid.Empty, 40, "ReadingDeplManifestStart", ProviderGuid, ProviderName );
        }
        static private Template_46 WpfHostUmReadyStateChangedTemplate(Action<Template_46> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_46(action, 9027, 116, "WpfHostUm", Guid.Empty, 97, "ReadyStateChanged", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmStartingCLREndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9024, 116, "WpfHostUm", Guid.Empty, 91, "StartingCLREnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmStartingCLRStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9023, 116, "WpfHostUm", Guid.Empty, 90, "StartingCLRStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmUIActivationEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9033, 116, "WpfHostUm", Guid.Empty, 103, "UIActivationEnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmUIActivationStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9032, 116, "WpfHostUm", Guid.Empty, 102, "UIActivationStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmVersionActivateEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9022, 116, "WpfHostUm", Guid.Empty, 62, "VersionActivateEnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmVersionActivateStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9021, 116, "WpfHostUm", Guid.Empty, 61, "VersionActivateStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmVersionAttachTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9020, 116, "WpfHostUm", Guid.Empty, 60, "VersionAttach", ProviderGuid, ProviderName );
        }
        static private Template_HR WpfHostUmWinMainEndTemplate(Action<Template_HR> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_HR(action, 9004, 116, "WpfHostUm", Guid.Empty, 31, "WinMainEnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUmWinMainStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9003, 116, "WpfHostUm", Guid.Empty, 30, "WinMainStart", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUpdateBrowserCommandsEndTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9078, 117, "WpfHost", Guid.Empty, 71, "UpdateBrowserCommandsEnd", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostUpdateBrowserCommandsStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9077, 117, "WpfHost", Guid.Empty, 70, "UpdateBrowserCommandsStart", ProviderGuid, ProviderName );
        }
        static private Template_53 WpfHostXappLauncherAppExitTemplate(Action<Template_53> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Template_53(action, 9047, 117, "WpfHost", Guid.Empty, 14, "XappLauncherAppExit", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostXappLauncherAppNavigatedTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9074, 117, "WpfHost", Guid.Empty, 60, "XappLauncherAppNavigated", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WpfHostXappLauncherAppStartupTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9046, 117, "WpfHost", Guid.Empty, 13, "XappLauncherAppStartup", ProviderGuid, ProviderName );
        }

        static private volatile TraceEvent[] s_templates;
        protected internal override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[333];
                templates[0] = WClientCreateVisualTemplate(null);
                templates[1] = WClientAppCtorTemplate(null);
                templates[2] = WClientAppRunTemplate(null);
                templates[3] = WClientStringTemplate(null);
                templates[4] = WClientStringStartTemplate(null);
                templates[5] = WClientStringStopTemplate(null);
                templates[6] = WClientPropParentCheckTemplate(null);
                templates[7] = UpdateVisualStateStartTemplate(null);
                templates[8] = UpdateVisualStateStopTemplate(null);
                templates[9] = WPFElementIDElementNameTemplate(null);
                templates[10] = WPFElementIDTemplate(null);
                templates[11] = WClientFontCacheTemplate(null);
                templates[12] = WClientInputMessageTemplate(null);
                templates[13] = StylusEventQueuedTemplate(null);
                templates[14] = TouchDownReportedTemplate(null);
                templates[15] = TouchMoveReportedTemplate(null);
                templates[16] = TouchUpReportedTemplate(null);
                templates[17] = ManipulationReportFrameTemplate(null);
                templates[18] = ManipulationEventRaisedTemplate(null);
                templates[19] = PenThreadPoolThreadAcquisitionTemplate(null);
                templates[20] = CreateStickyNoteStartTemplate(null);
                templates[21] = CreateStickyNoteStopTemplate(null);
                templates[22] = DeleteTextNoteStartTemplate(null);
                templates[23] = DeleteTextNoteStopTemplate(null);
                templates[24] = DeleteInkNoteStartTemplate(null);
                templates[25] = DeleteInkNoteStopTemplate(null);
                templates[26] = CreateHighlightStartTemplate(null);
                templates[27] = CreateHighlightStopTemplate(null);
                templates[28] = ClearHighlightStartTemplate(null);
                templates[29] = ClearHighlightStopTemplate(null);
                templates[30] = LoadAnnotationsStartTemplate(null);
                templates[31] = LoadAnnotationsStopTemplate(null);
                templates[32] = AddAnnotationStartTemplate(null);
                templates[33] = AddAnnotationStopTemplate(null);
                templates[34] = DeleteAnnotationStartTemplate(null);
                templates[35] = DeleteAnnotationStopTemplate(null);
                templates[36] = GetAnnotationByIdStartTemplate(null);
                templates[37] = GetAnnotationByIdStopTemplate(null);
                templates[38] = GetAnnotationByLocStartTemplate(null);
                templates[39] = GetAnnotationByLocStopTemplate(null);
                templates[40] = GetAnnotationsStartTemplate(null);
                templates[41] = GetAnnotationsStopTemplate(null);
                templates[42] = SerializeAnnotationStartTemplate(null);
                templates[43] = SerializeAnnotationStopTemplate(null);
                templates[44] = DeserializeAnnotationStartTemplate(null);
                templates[45] = DeserializeAnnotationStopTemplate(null);
                templates[46] = UpdateAnnotationWithSNCStartTemplate(null);
                templates[47] = UpdateAnnotationWithSNCStopTemplate(null);
                templates[48] = UpdateSNCWithAnnotationStartTemplate(null);
                templates[49] = UpdateSNCWithAnnotationStopTemplate(null);
                templates[50] = AnnotationTextChangedStartTemplate(null);
                templates[51] = AnnotationTextChangedStopTemplate(null);
                templates[52] = AnnotationInkChangedStartTemplate(null);
                templates[53] = AnnotationInkChangedStopTemplate(null);
                templates[54] = AddAttachedSNStartTemplate(null);
                templates[55] = AddAttachedSNStopTemplate(null);
                templates[56] = RemoveAttachedSNStartTemplate(null);
                templates[57] = RemoveAttachedSNStopTemplate(null);
                templates[58] = AddAttachedHighlightStartTemplate(null);
                templates[59] = AddAttachedHighlightStopTemplate(null);
                templates[60] = RemoveAttachedHighlightStartTemplate(null);
                templates[61] = RemoveAttachedHighlightStopTemplate(null);
                templates[62] = AddAttachedMHStartTemplate(null);
                templates[63] = AddAttachedMHStopTemplate(null);
                templates[64] = RemoveAttachedMHStartTemplate(null);
                templates[65] = RemoveAttachedMHStopTemplate(null);
                templates[66] = WClientParseBamlStartTemplate(null);
                templates[67] = WClientParseBamlStopTemplate(null);
                templates[68] = WClientParseXmlStartTemplate(null);
                templates[69] = WClientParseXmlStopTemplate(null);
                templates[70] = WClientParseFefCrInstStartTemplate(null);
                templates[71] = WClientParseFefCrInstStopTemplate(null);
                templates[72] = WClientParseInstVisTreeStartTemplate(null);
                templates[73] = WClientParseInstVisTreeStopTemplate(null);
                templates[74] = WClientParseRdrCrInstStartTemplate(null);
                templates[75] = WClientParseRdrCrInstStopTemplate(null);
                templates[76] = WClientParseRdrCrInFTypStartTemplate(null);
                templates[77] = WClientParseRdrCrInFTypStopTemplate(null);
                templates[78] = WClientResourceFindStartTemplate(null);
                templates[79] = WClientResourceFindStopTemplate(null);
                templates[80] = WClientResourceCacheValueTemplate(null);
                templates[81] = WClientResourceCacheNullTemplate(null);
                templates[82] = WClientResourceCacheMissTemplate(null);
                templates[83] = WClientResourceStockTemplate(null);
                templates[84] = WClientResourceBamlAssemblyTemplate(null);
                templates[85] = WClientParseXamlStartTemplate(null);
                templates[86] = WClientParseXamlBamlInfoTemplate(null);
                templates[87] = WClientParseXamlStopTemplate(null);
                templates[88] = WClientDRXFlushPageStartTemplate(null);
                templates[89] = WClientDRXFlushPageStopTemplate(null);
                templates[90] = WClientDRXSerializeTreeStartTemplate(null);
                templates[91] = WClientDRXSerializeTreeStopTemplate(null);
                templates[92] = WClientDRXGetVisualStartTemplate(null);
                templates[93] = WClientDRXGetVisualStopTemplate(null);
                templates[94] = WClientDRXReleaseWriterStartTemplate(null);
                templates[95] = WClientDRXReleaseWriterStopTemplate(null);
                templates[96] = WClientDRXGetPrintCapStartTemplate(null);
                templates[97] = WClientDRXGetPrintCapStopTemplate(null);
                templates[98] = WClientDRXPTProviderStartTemplate(null);
                templates[99] = WClientDRXPTProviderStopTemplate(null);
                templates[100] = WClientDRXRasterStartTemplate(null);
                templates[101] = WClientDRXRasterStopTemplate(null);
                templates[102] = WClientDRXOpenPackageStartTemplate(null);
                templates[103] = WClientDRXOpenPackageStopTemplate(null);
                templates[104] = WClientDRXGetStreamStartTemplate(null);
                templates[105] = WClientDRXGetStreamStopTemplate(null);
                templates[106] = WClientDRXPageVisibleTemplate(null);
                templates[107] = WClientDRXPageLoadedTemplate(null);
                templates[108] = WClientDRXInvalidateViewTemplate(null);
                templates[109] = WClientDRXStyleCreatedTemplate(null);
                templates[110] = WClientDRXFindStartTemplate(null);
                templates[111] = WClientDRXFindStopTemplate(null);
                templates[112] = WClientDRXZoomTemplate(null);
                templates[113] = WClientDRXEnsureOMStartTemplate(null);
                templates[114] = WClientDRXEnsureOMStopTemplate(null);
                templates[115] = WClientDRXTreeFlattenStartTemplate(null);
                templates[116] = WClientDRXTreeFlattenStopTemplate(null);
                templates[117] = WClientDRXAlphaFlattenStartTemplate(null);
                templates[118] = WClientDRXAlphaFlattenStopTemplate(null);
                templates[119] = WClientDRXGetDevModeStartTemplate(null);
                templates[120] = WClientDRXGetDevModeStopTemplate(null);
                templates[121] = WClientDRXStartDocStartTemplate(null);
                templates[122] = WClientDRXStartDocStopTemplate(null);
                templates[123] = WClientDRXEndDocStartTemplate(null);
                templates[124] = WClientDRXEndDocStopTemplate(null);
                templates[125] = WClientDRXStartPageStartTemplate(null);
                templates[126] = WClientDRXStartPageStopTemplate(null);
                templates[127] = WClientDRXEndPageStartTemplate(null);
                templates[128] = WClientDRXEndPageStopTemplate(null);
                templates[129] = WClientDRXCommitPageStartTemplate(null);
                templates[130] = WClientDRXCommitPageStopTemplate(null);
                templates[131] = WClientDRXConvertFontStartTemplate(null);
                templates[132] = WClientDRXConvertFontStopTemplate(null);
                templates[133] = WClientDRXConvertImageStartTemplate(null);
                templates[134] = WClientDRXConvertImageStopTemplate(null);
                templates[135] = WClientDRXSaveXpsStartTemplate(null);
                templates[136] = WClientDRXSaveXpsStopTemplate(null);
                templates[137] = WClientDRXLoadPrimitiveStartTemplate(null);
                templates[138] = WClientDRXLoadPrimitiveStopTemplate(null);
                templates[139] = WClientDRXSavePageStartTemplate(null);
                templates[140] = WClientDRXSavePageStopTemplate(null);
                templates[141] = WClientDRXSerializationStartTemplate(null);
                templates[142] = WClientDRXSerializationStopTemplate(null);
                templates[143] = WClientDRXReadStreamStartTemplate(null);
                templates[144] = WClientDRXReadStreamStopTemplate(null);
                templates[145] = WClientDRXGetPageStartTemplate(null);
                templates[146] = WClientDRXGetPageStopTemplate(null);
                templates[147] = WClientDRXLineDownTemplate(null);
                templates[148] = WClientDRXPageDownTemplate(null);
                templates[149] = WClientDRXPageJumpTemplate(null);
                templates[150] = WClientDRXLayoutStartTemplate(null);
                templates[151] = WClientDRXLayoutStopTemplate(null);
                templates[152] = WClientDRXInstantiatedTemplate(null);
                templates[153] = WClientTimeManagerTickStartTemplate(null);
                templates[154] = WClientTimeManagerTickStopTemplate(null);
                templates[155] = WClientLayoutStartTemplate(null);
                templates[156] = WClientLayoutStopTemplate(null);
                templates[157] = WClientMeasureStartTemplate(null);
                templates[158] = WClientMeasureMeasureAbortTemplate(null);
                templates[159] = WClientMeasureStopTemplate(null);
                templates[160] = WClientMeasureMeasureElementBeginTemplate(null);
                templates[161] = WClientMeasureMeasureElementEndTemplate(null);
                templates[162] = WClientArrangeStartTemplate(null);
                templates[163] = WClientArrangeArrangeAbortTemplate(null);
                templates[164] = WClientArrangeStopTemplate(null);
                templates[165] = WClientArrangeArrangeElementBeginTemplate(null);
                templates[166] = WClientArrangeArrangeElementEndTemplate(null);
                templates[167] = WClientLayoutAbortTemplate(null);
                templates[168] = WClientLayoutFireSizeChangedBeginTemplate(null);
                templates[169] = WClientLayoutFireSizeChangedEndTemplate(null);
                templates[170] = WClientLayoutFireLayoutUpdatedBeginTemplate(null);
                templates[171] = WClientLayoutFireLayoutUpdatedEndTemplate(null);
                templates[172] = WClientLayoutFireAutomationEventsBeginTemplate(null);
                templates[173] = WClientLayoutFireAutomationEventsEndTemplate(null);
                templates[174] = WClientLayoutExceptionTemplate(null);
                templates[175] = WClientLayoutInvalidatedTemplate(null);
                templates[176] = WpfHostUmWinMainStartTemplate(null);
                templates[177] = WpfHostUmWinMainEndTemplate(null);
                templates[178] = WpfHostUmInvokingBrowserTemplate(null);
                templates[179] = WpfHostUmLaunchingRestrictedProcessTemplate(null);
                templates[180] = WpfHostUmEnteringMessageLoopTemplate(null);
                templates[181] = WpfHostUmClassFactoryCreateInstanceTemplate(null);
                templates[182] = WpfHostUmReadingDeplManifestStartTemplate(null);
                templates[183] = WpfHostUmReadingDeplManifestEndTemplate(null);
                templates[184] = WpfHostUmReadingAppManifestStartTemplate(null);
                templates[185] = WpfHostUmReadingAppManifestEndTemplate(null);
                templates[186] = WpfHostUmParsingMarkupVersionStartTemplate(null);
                templates[187] = WpfHostUmParsingMarkupVersionEndTemplate(null);
                templates[188] = WpfHostUmIPersistFileLoadTemplate(null);
                templates[189] = WpfHostUmIPersistMonikerLoadStartTemplate(null);
                templates[190] = WpfHostUmIPersistMonikerLoadEndTemplate(null);
                templates[191] = WpfHostUmBindProgressTemplate(null);
                templates[192] = WpfHostUmOnStopBindingTemplate(null);
                templates[193] = WpfHostUmVersionAttachTemplate(null);
                templates[194] = WpfHostUmVersionActivateStartTemplate(null);
                templates[195] = WpfHostUmVersionActivateEndTemplate(null);
                templates[196] = WpfHostUmStartingCLRStartTemplate(null);
                templates[197] = WpfHostUmStartingCLREndTemplate(null);
                templates[198] = WpfHostUmIHlinkTargetNavigateStartTemplate(null);
                templates[199] = WpfHostUmIHlinkTargetNavigateEndTemplate(null);
                templates[200] = WpfHostUmReadyStateChangedTemplate(null);
                templates[201] = WpfHostUmInitDocHostStartTemplate(null);
                templates[202] = WpfHostUmInitDocHostEndTemplate(null);
                templates[203] = WpfHostUmMergingMenusStartTemplate(null);
                templates[204] = WpfHostUmMergingMenusEndTemplate(null);
                templates[205] = WpfHostUmUIActivationStartTemplate(null);
                templates[206] = WpfHostUmUIActivationEndTemplate(null);
                templates[207] = WpfHostUmLoadingResourceDLLStartTemplate(null);
                templates[208] = WpfHostUmLoadingResourceDLLEndTemplate(null);
                templates[209] = WpfHostUmOleCmdQueryStatusStartTemplate(null);
                templates[210] = WpfHostUmOleCmdQueryStatusEndTemplate(null);
                templates[211] = WpfHostUmOleCmdExecStartTemplate(null);
                templates[212] = WpfHostUmOleCmdExecEndTemplate(null);
                templates[213] = WpfHostUmProgressPageShownTemplate(null);
                templates[214] = WpfHostUmAdHocProfile1StartTemplate(null);
                templates[215] = WpfHostUmAdHocProfile1EndTemplate(null);
                templates[216] = WpfHostUmAdHocProfile2StartTemplate(null);
                templates[217] = WpfHostUmAdHocProfile2EndTemplate(null);
                templates[218] = WpfHostDocObjHostCreatedTemplate(null);
                templates[219] = WpfHostXappLauncherAppStartupTemplate(null);
                templates[220] = WpfHostXappLauncherAppExitTemplate(null);
                templates[221] = WpfHostDocObjHostRunApplicationStartTemplate(null);
                templates[222] = WpfHostDocObjHostRunApplicationEndTemplate(null);
                templates[223] = WpfHostClickOnceActivationStartTemplate(null);
                templates[224] = WpfHostClickOnceActivationEndTemplate(null);
                templates[225] = WpfHostInitAppProxyStartTemplate(null);
                templates[226] = WpfHostInitAppProxyEndTemplate(null);
                templates[227] = WpfHostAppProxyCtorTemplate(null);
                templates[228] = WpfHostRootBrowserWindowSetupStartTemplate(null);
                templates[229] = WpfHostRootBrowserWindowSetupEndTemplate(null);
                templates[230] = WpfHostAppProxyRunStartTemplate(null);
                templates[231] = WpfHostAppProxyRunEndTemplate(null);
                templates[232] = WpfHostAppDomainManagerCctorTemplate(null);
                templates[233] = WpfHostApplicationActivatorCreateInstanceStartTemplate(null);
                templates[234] = WpfHostApplicationActivatorCreateInstanceEndTemplate(null);
                templates[235] = WpfHostDetermineApplicationTrustStartTemplate(null);
                templates[236] = WpfHostDetermineApplicationTrustEndTemplate(null);
                templates[237] = WpfHostFirstTimeActivationTemplate(null);
                templates[238] = WpfHostGetDownloadPageStartTemplate(null);
                templates[239] = WpfHostGetDownloadPageEndTemplate(null);
                templates[240] = WpfHostDownloadDeplManifestStartTemplate(null);
                templates[241] = WpfHostDownloadDeplManifestEndTemplate(null);
                templates[242] = WpfHostAssertAppRequirementsStartTemplate(null);
                templates[243] = WpfHostAssertAppRequirementsEndTemplate(null);
                templates[244] = WpfHostDownloadApplicationStartTemplate(null);
                templates[245] = WpfHostDownloadApplicationEndTemplate(null);
                templates[246] = WpfHostDownloadProgressUpdateTemplate(null);
                templates[247] = WpfHostXappLauncherAppNavigatedTemplate(null);
                templates[248] = WpfHostUpdateBrowserCommandsStartTemplate(null);
                templates[249] = WpfHostUpdateBrowserCommandsEndTemplate(null);
                templates[250] = WpfHostPostShutdownTemplate(null);
                templates[251] = WpfHostAbortingActivationTemplate(null);
                templates[252] = WpfHostIBHSRunStartTemplate(null);
                templates[253] = WpfHostIBHSRunEndTemplate(null);
                templates[254] = NavigationNavigationAsyncWorkItemTemplate(null);
                templates[255] = NavigationNavigationWebResponseReceivedTemplate(null);
                templates[256] = NavigationNavigationEndTemplate(null);
                templates[257] = NavigationNavigationContentRenderedTemplate(null);
                templates[258] = NavigationNavigationStartTemplate(null);
                templates[259] = NavigationNavigationLaunchBrowserTemplate(null);
                templates[260] = NavigationNavigationPageFunctionReturnTemplate(null);
                templates[261] = DrawBitmapTemplate(null);
                templates[262] = BitmapCopyTemplate(null);
                templates[263] = SetClipTemplate(null);
                templates[264] = DWMDraw_ClearStartTemplate(null);
                templates[265] = DWMDraw_ClearStopTemplate(null);
                templates[266] = DWMDraw_BitmapStartTemplate(null);
                templates[267] = DWMDraw_BitmapEndTemplate(null);
                templates[268] = DWMDraw_RectangleStartTemplate(null);
                templates[269] = DWMDraw_RectangleEndTemplate(null);
                templates[270] = DWMDraw_GeometryStartTemplate(null);
                templates[271] = DWMDraw_GeometryEndTemplate(null);
                templates[272] = DWMDraw_ImageStartTemplate(null);
                templates[273] = DWMDraw_ImageEndTemplate(null);
                templates[274] = DWMDraw_GlyphRunStartTemplate(null);
                templates[275] = DWMDraw_GlyphRunEndTemplate(null);
                templates[276] = DWMDraw_BeginLayerStartTemplate(null);
                templates[277] = DWMDraw_BeginLayerEndTemplate(null);
                templates[278] = DWMDraw_EndLayerStartTemplate(null);
                templates[279] = DWMDraw_EndLayerEndTemplate(null);
                templates[280] = DWMDraw_ClippedBitmapStartTemplate(null);
                templates[281] = DWMDraw_ClippedBitmapEndTemplate(null);
                templates[282] = DWMDraw_Template(null);
                templates[283] = LayerEventStartTemplate(null);
                templates[284] = LayerEventStopTemplate(null);
                templates[285] = WClientDesktopRTCreateStartTemplate(null);
                templates[286] = WClientDesktopRTCreateStopTemplate(null);
                templates[287] = WClientUceProcessQueueStartTemplate(null);
                templates[288] = WClientUceProcessQueueStopTemplate(null);
                templates[289] = WClientUceProcessQueueTemplate(null);
                templates[290] = WClientUcePrecomputeStartTemplate(null);
                templates[291] = WClientUcePrecomputeStopTemplate(null);
                templates[292] = WClientUceRenderStartTemplate(null);
                templates[293] = WClientUceRenderStopTemplate(null);
                templates[294] = WClientUcePresentStartTemplate(null);
                templates[295] = WClientUcePresentStopTemplate(null);
                templates[296] = WClientUceResponseTemplate(null);
                templates[297] = WClientUceCheckDeviceStateTemplate(null);
                templates[298] = VisualCacheAllocTemplate(null);
                templates[299] = VisualCacheUpdateTemplate(null);
                templates[300] = CreateChannelTemplate(null);
                templates[301] = CreateOrAddOnChnlTemplate(null);
                templates[302] = CreateWpfGfxResourceTemplate(null);
                templates[303] = ReleaseOnChannelTemplate(null);
                templates[304] = UnexpectedSoftwareFallbackTemplate(null);
                templates[305] = WClientInterlockedRenderStartTemplate(null);
                templates[306] = WClientInterlockedRenderStopTemplate(null);
                templates[307] = WClientRenderHandlerStartTemplate(null);
                templates[308] = WClientRenderHandlerStopTemplate(null);
                templates[309] = WClientAnimRenderHandlerStartTemplate(null);
                templates[310] = WClientAnimRenderHandlerStopTemplate(null);
                templates[311] = WClientMediaRenderStartTemplate(null);
                templates[312] = WClientMediaRenderStopTemplate(null);
                templates[313] = WClientPostRenderTemplate(null);
                templates[314] = WClientQPCFrequencyTemplate(null);
                templates[315] = WClientPrecomputeSceneStartTemplate(null);
                templates[316] = WClientPrecomputeSceneStopTemplate(null);
                templates[317] = WClientCompileSceneStartTemplate(null);
                templates[318] = WClientCompileSceneStopTemplate(null);
                templates[319] = WClientUIResponseTemplate(null);
                templates[320] = WClientUICommitChannelTemplate(null);
                templates[321] = WClientUceNotifyPresentTemplate(null);
                templates[322] = WClientScheduleRenderTemplate(null);
                templates[323] = WClientOnRenderStartTemplate(null);
                templates[324] = WClientOnRenderStopTemplate(null);
                templates[325] = WClientCreateIRTTemplate(null);
                templates[326] = WClientPotentialIRTResourceTemplate(null);
                templates[327] = WClientUIContextDispatchStartTemplate(null);
                templates[328] = WClientUIContextDispatchStopTemplate(null);
                templates[329] = WClientUIContextPostTemplate(null);
                templates[330] = WClientUIContextAbortTemplate(null);
                templates[331] = WClientUIContextPromoteTemplate(null);
                templates[332] = WClientUIContextIdleTemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsWPF
{
    internal sealed class Template_2 : TraceEvent
    {
        public int width { get { return GetInt32At(0); } }
        public int height { get { return GetInt32At(4); } }

        #region Private
        internal Template_2(Action<Template_2> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_2>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "width", width);
             XmlAttrib(sb, "height", height);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "width", "height"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return width;
                case 1:
                    return height;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4096; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_2> m_target;
        #endregion
    }
    internal sealed class CreateChannel : TraceEvent
    {
        public Address ChannelPtr { get { return GetAddressAt(0); } }
        public int ChannelHandle { get { return GetInt32At(HostOffset(4, 1)); } }

        #region Private
        internal CreateChannel(Action<CreateChannel> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(8, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(8, 1)));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CreateChannel>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "ChannelPtr", ChannelPtr);
             XmlAttrib(sb, "ChannelHandle", ChannelHandle);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ChannelPtr", "ChannelHandle"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ChannelPtr;
                case 1:
                    return ChannelHandle;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4098; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<CreateChannel> m_target;
        #endregion
    }
    internal sealed class CreateOrAddOnChnl : TraceEvent
    {
        public long PerfEltId { get { return GetInt64At(0); } }
        public Address ChannelPtr { get { return GetAddressAt(8); } }
        public int ResourceHandle { get { return GetInt32At(HostOffset(12, 1)); } }
        public int ResourceType { get { return GetInt32At(HostOffset(16, 1)); } }

        #region Private
        internal CreateOrAddOnChnl(Action<CreateOrAddOnChnl> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(20, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(20, 1)));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CreateOrAddOnChnl>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PerfEltId", PerfEltId);
             XmlAttribHex(sb, "ChannelPtr", ChannelPtr);
             XmlAttrib(sb, "ResourceHandle", ResourceHandle);
             XmlAttrib(sb, "ResourceType", ResourceType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PerfEltId", "ChannelPtr", "ResourceHandle", "ResourceType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PerfEltId;
                case 1:
                    return ChannelPtr;
                case 2:
                    return ResourceHandle;
                case 3:
                    return ResourceType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4098; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<CreateOrAddOnChnl> m_target;
        #endregion
    }
    internal sealed class CreateWpfGfxResource : TraceEvent
    {
        public Address ResourcePtr { get { return GetAddressAt(0); } }
        public int ChannelHandle { get { return GetInt32At(HostOffset(4, 1)); } }
        public int ResourceHandle { get { return GetInt32At(HostOffset(8, 1)); } }
        public int ResourceType { get { return GetInt32At(HostOffset(12, 1)); } }

        #region Private
        internal CreateWpfGfxResource(Action<CreateWpfGfxResource> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(16, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(16, 1)));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CreateWpfGfxResource>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "ResourcePtr", ResourcePtr);
             XmlAttrib(sb, "ChannelHandle", ChannelHandle);
             XmlAttrib(sb, "ResourceHandle", ResourceHandle);
             XmlAttrib(sb, "ResourceType", ResourceType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ResourcePtr", "ChannelHandle", "ResourceHandle", "ResourceType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ResourcePtr;
                case 1:
                    return ChannelHandle;
                case 2:
                    return ResourceHandle;
                case 3:
                    return ResourceType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4098; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<CreateWpfGfxResource> m_target;
        #endregion
    }
    internal sealed class Template_1 : TraceEvent
    {
        public Address Bitmap { get { return GetAddressAt(0); } }
        public int width { get { return GetInt32At(HostOffset(4, 1)); } }
        public int height { get { return GetInt32At(HostOffset(8, 1)); } }

        #region Private
        internal Template_1(Action<Template_1> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(12, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(12, 1)));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_1>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "Bitmap", Bitmap);
             XmlAttrib(sb, "width", width);
             XmlAttrib(sb, "height", height);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Bitmap", "width", "height"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Bitmap;
                case 1:
                    return width;
                case 2:
                    return height;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4096; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_1> m_target;
        #endregion
    }
    internal sealed class FloatBounds : TraceEvent
    {
        public float left { get { return GetSingleAt(0); } }
        public float top { get { return GetSingleAt(4); } }
        public float right { get { return GetSingleAt(8); } }
        public float bottom { get { return GetSingleAt(12); } }

        #region Private
        internal FloatBounds(Action<FloatBounds> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FloatBounds>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "left", left);
             XmlAttrib(sb, "top", top);
             XmlAttrib(sb, "right", right);
             XmlAttrib(sb, "bottom", bottom);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "left", "top", "right", "bottom"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return left;
                case 1:
                    return top;
                case 2:
                    return right;
                case 3:
                    return bottom;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4096; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<FloatBounds> m_target;
        #endregion
    }
    internal sealed class Template_6 : TraceEvent
    {
        public int Z { get { return GetInt32At(0); } }

        #region Private
        internal Template_6(Action<Template_6> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_6>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Z", Z);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Z"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Z;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4096; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_6> m_target;
        #endregion
    }
    internal sealed class ID32Template : TraceEvent
    {
        public int Id { get { return GetInt32At(0); } }

        #region Private
        internal ID32Template(Action<ID32Template> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ID32Template>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 10; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<ID32Template> m_target;
        #endregion
    }
    internal sealed class URITemplate : TraceEvent
    {
        public string URI { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal URITemplate(Action<URITemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(0)));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<URITemplate>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "URI", URI);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "URI"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return URI;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1024; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<URITemplate> m_target;
        #endregion
    }
    internal sealed class Template_57 : TraceEvent
    {
        public string PF { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal Template_57(Action<Template_57> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(0)));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_57>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PF", PF);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PF;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1024; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_57> m_target;
        #endregion
    }
    internal sealed class Template_56 : TraceEvent
    {
        public string NavigationMode { get { return GetUnicodeStringAt(0); } }
        public string UriOrObject { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal Template_56(Action<Template_56> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_56>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NavigationMode", NavigationMode);
             XmlAttrib(sb, "UriOrObject", UriOrObject);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NavigationMode", "UriOrObject"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NavigationMode;
                case 1:
                    return UriOrObject;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1026; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_56> m_target;
        #endregion
    }
    internal sealed class ReleaseOnChannel : TraceEvent
    {
        public Address ChannelPtr { get { return GetAddressAt(0); } }
        public int ResourceHandle { get { return GetInt32At(HostOffset(4, 1)); } }

        #region Private
        internal ReleaseOnChannel(Action<ReleaseOnChannel> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(8, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(8, 1)));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ReleaseOnChannel>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "ChannelPtr", ChannelPtr);
             XmlAttrib(sb, "ResourceHandle", ResourceHandle);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ChannelPtr", "ResourceHandle"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ChannelPtr;
                case 1:
                    return ResourceHandle;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4098; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<ReleaseOnChannel> m_target;
        #endregion
    }
    internal sealed class IntBounds : TraceEvent
    {
        public int left { get { return GetInt32At(0); } }
        public int top { get { return GetInt32At(4); } }
        public int right { get { return GetInt32At(8); } }
        public int bottom { get { return GetInt32At(12); } }

        #region Private
        internal IntBounds(Action<IntBounds> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IntBounds>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "left", left);
             XmlAttrib(sb, "top", top);
             XmlAttrib(sb, "right", right);
             XmlAttrib(sb, "bottom", bottom);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "left", "top", "right", "bottom"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return left;
                case 1:
                    return top;
                case 2:
                    return right;
                case 3:
                    return bottom;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4096; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<IntBounds> m_target;
        #endregion
    }
    internal sealed class GfxSoftwareFallback : TraceEvent
    {
        public UnexptectedSWFallbackReason Reason { get { return (UnexptectedSWFallbackReason)GetInt32At(0); } }

        #region Private
        internal GfxSoftwareFallback(Action<GfxSoftwareFallback> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GfxSoftwareFallback>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Reason", Reason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Reason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4096; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<GfxSoftwareFallback> m_target;
        #endregion
    }
    internal sealed class VisualCacheTemplate : TraceEvent
    {
        public int uX { get { return GetInt32At(0); } }
        public int uY { get { return GetInt32At(4); } }
        public int uWidth { get { return GetInt32At(8); } }
        public int uHeight { get { return GetInt32At(12); } }

        #region Private
        internal VisualCacheTemplate(Action<VisualCacheTemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<VisualCacheTemplate>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "uX", uX);
             XmlAttrib(sb, "uY", uY);
             XmlAttrib(sb, "uWidth", uWidth);
             XmlAttrib(sb, "uHeight", uHeight);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "uX", "uY", "uWidth", "uHeight"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return uX;
                case 1:
                    return uY;
                case 2:
                    return uWidth;
                case 3:
                    return uHeight;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4098; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<VisualCacheTemplate> m_target;
        #endregion
    }
    internal sealed class PerfElementID : TraceEvent
    {
        public long Id { get { return GetInt64At(0); } }

        #region Private
        internal PerfElementID(Action<PerfElementID> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PerfElementID>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4098; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<PerfElementID> m_target;
        #endregion
    }
    internal sealed class LayoutAborted : TraceEvent
    {
        public int LoopDurationMS { get { return GetInt32At(0); } }
        public int loopCounter { get { return GetInt32At(4); } }

        #region Private
        internal LayoutAborted(Action<LayoutAborted> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LayoutAborted>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "LoopDurationMS", LoopDurationMS);
             XmlAttrib(sb, "loopCounter", loopCounter);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "LoopDurationMS", "loopCounter"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return LoopDurationMS;
                case 1:
                    return loopCounter;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 258; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<LayoutAborted> m_target;
        #endregion
    }
    internal sealed class ArrangeData : TraceEvent
    {
        public long Id { get { return GetInt64At(0); } }
        public double Top { get { return GetDoubleAt(8); } }
        public double Left { get { return GetDoubleAt(16); } }
        public double Width { get { return GetDoubleAt(24); } }
        public double Height { get { return GetDoubleAt(32); } }

        #region Private
        internal ArrangeData(Action<ArrangeData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 40));
            Debug.Assert(!(Version > 0 && EventDataLength < 40));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ArrangeData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "Top", Top);
             XmlAttrib(sb, "Left", Left);
             XmlAttrib(sb, "Width", Width);
             XmlAttrib(sb, "Height", Height);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "Top", "Left", "Width", "Height"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return Top;
                case 2:
                    return Left;
                case 3:
                    return Width;
                case 4:
                    return Height;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 256; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<ArrangeData> m_target;
        #endregion
    }
    internal sealed class Counter : TraceEvent
    {
        public int Count { get { return GetInt32At(0); } }

        #region Private
        internal Counter(Action<Counter> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 4));
            Debug.Assert(!(Version > 2 && EventDataLength < 4));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Counter>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Count", Count);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Count"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Count;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 258; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Counter> m_target;
        #endregion
    }
    internal sealed class CreateIRT : TraceEvent
    {
        public Address ResourcePtr { get { return GetAddressAt(0); } }
        public Address ParentResourcePtr { get { return GetAddressAt(HostOffset(4, 1)); } }
        public IntermediateRenderTargetReason Reason { get { return (IntermediateRenderTargetReason)GetInt32At(HostOffset(8, 2)); } }

        #region Private
        internal CreateIRT(Action<CreateIRT> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(12, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(12, 2)));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CreateIRT>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "ResourcePtr", ResourcePtr);
             XmlAttribHex(sb, "ParentResourcePtr", ParentResourcePtr);
             XmlAttrib(sb, "Reason", Reason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ResourcePtr", "ParentResourcePtr", "Reason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ResourcePtr;
                case 1:
                    return ParentResourcePtr;
                case 2:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4096; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<CreateIRT> m_target;
        #endregion
    }
    internal sealed class Template_18 : TraceEvent
    {
        public int Id { get { return GetInt32At(0); } }
        public long HWND { get { return GetInt64At(4); } }

        #region Private
        internal Template_18(Action<Template_18> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 12));
            Debug.Assert(!(Version > 2 && EventDataLength < 12));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_18>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "HWND", HWND);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "HWND"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return HWND;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_18> m_target;
        #endregion
    }
    internal sealed class HwndTemplate : TraceEvent
    {
        public long Hwnd { get { return GetInt64At(0); } }

        #region Private
        internal HwndTemplate(Action<HwndTemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<HwndTemplate>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Hwnd", Hwnd);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Hwnd"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Hwnd;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4098; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<HwndTemplate> m_target;
        #endregion
    }
    internal sealed class Template_33 : TraceEvent
    {
        public int VerticalOffset { get { return GetInt32At(0); } }

        #region Private
        internal Template_33(Action<Template_33> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 4));
            Debug.Assert(!(Version > 2 && EventDataLength < 4));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_33>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "VerticalOffset", VerticalOffset);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "VerticalOffset"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return VerticalOffset;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 64; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_33> m_target;
        #endregion
    }
    internal sealed class Template_34 : TraceEvent
    {
        public int PageNumber { get { return GetInt32At(0); } }
        public int FirstVisiblePage { get { return GetInt32At(4); } }

        #region Private
        internal Template_34(Action<Template_34> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_34>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PageNumber", PageNumber);
             XmlAttrib(sb, "FirstVisiblePage", FirstVisiblePage);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PageNumber", "FirstVisiblePage"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PageNumber;
                case 1:
                    return FirstVisiblePage;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 64; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_34> m_target;
        #endregion
    }
    internal sealed class Template_32 : TraceEvent
    {
        public int PageNumber { get { return GetInt32At(0); } }

        #region Private
        internal Template_32(Action<Template_32> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 4));
            Debug.Assert(!(Version > 2 && EventDataLength < 4));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_32>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PageNumber", PageNumber);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PageNumber"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PageNumber;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 64; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_32> m_target;
        #endregion
    }
    internal sealed class Template_31 : TraceEvent
    {
        public int FirstVisiblePage { get { return GetInt32At(0); } }
        public int LastVisiblePage { get { return GetInt32At(4); } }

        #region Private
        internal Template_31(Action<Template_31> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_31>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "FirstVisiblePage", FirstVisiblePage);
             XmlAttrib(sb, "LastVisiblePage", LastVisiblePage);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FirstVisiblePage", "LastVisiblePage"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FirstVisiblePage;
                case 1:
                    return LastVisiblePage;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 64; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_31> m_target;
        #endregion
    }
    internal sealed class Template_30 : TraceEvent
    {
        public int Result { get { return GetInt32At(0); } }

        #region Private
        internal Template_30(Action<Template_30> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 4));
            Debug.Assert(!(Version > 2 && EventDataLength < 4));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_30>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 64; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_30> m_target;
        #endregion
    }
    internal sealed class Template_35 : TraceEvent
    {
        public int Zoom { get { return GetInt32At(0); } }

        #region Private
        internal Template_35(Action<Template_35> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 4));
            Debug.Assert(!(Version > 2 && EventDataLength < 4));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_35>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Zoom", Zoom);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Zoom"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Zoom;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 64; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_35> m_target;
        #endregion
    }
    internal sealed class Template_19 : TraceEvent
    {
        public int Id { get { return GetInt32At(0); } }
        public long HWND { get { return GetInt64At(4); } }
        public int Msg { get { return GetInt32At(12); } }
        public int WParam { get { return GetInt32At(16); } }
        public int LParam { get { return GetInt32At(20); } }

        #region Private
        internal Template_19(Action<Template_19> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 24));
            Debug.Assert(!(Version > 2 && EventDataLength < 24));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_19>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "HWND", HWND);
             XmlAttrib(sb, "Msg", Msg);
             XmlAttrib(sb, "WParam", WParam);
             XmlAttrib(sb, "LParam", LParam);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "HWND", "Msg", "WParam", "LParam"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return HWND;
                case 2:
                    return Msg;
                case 3:
                    return WParam;
                case 4:
                    return LParam;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 10; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_19> m_target;
        #endregion
    }
    internal sealed class LayoutSourceTemplate : TraceEvent
    {
        public long Id { get { return GetInt64At(0); } }
        public LayoutSource source { get { return (LayoutSource)GetByteAt(8); } }

        #region Private
        internal LayoutSourceTemplate(Action<LayoutSourceTemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 3 && EventDataLength != 9));
            Debug.Assert(!(Version > 3 && EventDataLength < 9));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LayoutSourceTemplate>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "source", source);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "source"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return source;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 258; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<LayoutSourceTemplate> m_target;
        #endregion
    }
    internal sealed class MeasureData : TraceEvent
    {
        public long Id { get { return GetInt64At(0); } }
        public double Width { get { return GetDoubleAt(8); } }
        public double Height { get { return GetDoubleAt(16); } }

        #region Private
        internal MeasureData(Action<MeasureData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MeasureData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "Width", Width);
             XmlAttrib(sb, "Height", Height);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "Width", "Height"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return Width;
                case 2:
                    return Height;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 256; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<MeasureData> m_target;
        #endregion
    }
    internal sealed class Template_20 : TraceEvent
    {
        public int Id { get { return GetInt32At(0); } }
        public long QPCExpectedPresentTime { get { return GetInt64At(4); } }

        #region Private
        internal Template_20(Action<Template_20> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 12));
            Debug.Assert(!(Version > 2 && EventDataLength < 12));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_20>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "QPCExpectedPresentTime", QPCExpectedPresentTime);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "QPCExpectedPresentTime"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return QPCExpectedPresentTime;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4098; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_20> m_target;
        #endregion
    }
    internal sealed class MessageStringTemplate : TraceEvent
    {
        public string Message { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal MessageStringTemplate(Action<MessageStringTemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(0)));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MessageStringTemplate>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 32; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<MessageStringTemplate> m_target;
        #endregion
    }
    internal sealed class TypeStringTemplate : TraceEvent
    {
        public string Type { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal TypeStringTemplate(Action<TypeStringTemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(0)));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<TypeStringTemplate>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Type", Type);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Type"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Type;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 32; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<TypeStringTemplate> m_target;
        #endregion
    }
    internal sealed class WClientParseXamlBamlInfoTemplate : TraceEvent
    {
        public long PerfElementID { get { return GetInt64At(0); } }
        public int LineNumber { get { return GetInt32At(8); } }
        public int LinePosition { get { return GetInt32At(12); } }

        #region Private
        internal WClientParseXamlBamlInfoTemplate(Action<WClientParseXamlBamlInfoTemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WClientParseXamlBamlInfoTemplate>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PerfElementID", PerfElementID);
             XmlAttrib(sb, "LineNumber", LineNumber);
             XmlAttrib(sb, "LinePosition", LinePosition);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PerfElementID", "LineNumber", "LinePosition"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PerfElementID;
                case 1:
                    return LineNumber;
                case 2:
                    return LinePosition;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 32; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<WClientParseXamlBamlInfoTemplate> m_target;
        #endregion
    }
    internal sealed class PtrTemplate : TraceEvent
    {
        public Address Pointer { get { return GetAddressAt(0); } }

        #region Private
        internal PtrTemplate(Action<PtrTemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(4, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(4, 1)));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PtrTemplate>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "Pointer", Pointer);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pointer"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pointer;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4096; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<PtrTemplate> m_target;
        #endregion
    }
    internal sealed class Template_37 : TraceEvent
    {
        public int Id { get { return GetInt32At(0); } }
        public string TypeAndName { get { return GetUnicodeStringAt(4); } }

        #region Private
        internal Template_37(Action<Template_37> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(4)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(4)));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_37>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "TypeAndName", TypeAndName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "TypeAndName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return TypeAndName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_37> m_target;
        #endregion
    }
    internal sealed class Template_21 : TraceEvent
    {
        public long QPCFrequency { get { return GetInt64At(0); } }
        public long QPCCurrentTime { get { return GetInt64At(8); } }

        #region Private
        internal Template_21(Action<Template_21> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 16));
            Debug.Assert(!(Version > 2 && EventDataLength < 16));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_21>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QPCFrequency", QPCFrequency);
             XmlAttrib(sb, "QPCCurrentTime", QPCCurrentTime);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QPCFrequency", "QPCCurrentTime"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QPCFrequency;
                case 1:
                    return QPCCurrentTime;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4096; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_21> m_target;
        #endregion
    }
    internal sealed class AssemblyNameTemplate : TraceEvent
    {
        public string AssemblyName { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal AssemblyNameTemplate(Action<AssemblyNameTemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(0)));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AssemblyNameTemplate>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AssemblyName", AssemblyName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AssemblyName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AssemblyName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 32; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<AssemblyNameTemplate> m_target;
        #endregion
    }
    internal sealed class KeyStringTemplate : TraceEvent
    {
        public string Key { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal KeyStringTemplate(Action<KeyStringTemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(0)));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<KeyStringTemplate>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Key", Key);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Key"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Key;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 34; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<KeyStringTemplate> m_target;
        #endregion
    }
    internal sealed class Template_24 : TraceEvent
    {
        public int RenderDelay { get { return GetInt32At(0); } }

        #region Private
        internal Template_24(Action<Template_24> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 4));
            Debug.Assert(!(Version > 2 && EventDataLength < 4));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_24>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "RenderDelay", RenderDelay);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "RenderDelay"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return RenderDelay;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4096; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_24> m_target;
        #endregion
    }
    internal sealed class InfoStringTemplate : TraceEvent
    {
        public string Info { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal InfoStringTemplate(Action<InfoStringTemplate> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(0)));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<InfoStringTemplate>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Info", Info);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Info"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Info;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<InfoStringTemplate> m_target;
        #endregion
    }
    internal sealed class TimeTick : TraceEvent
    {
        public long TickTime { get { return GetInt64At(0); } }

        #region Private
        internal TimeTick(Action<TimeTick> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<TimeTick>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TickTime", TickTime);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TickTime"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TickTime;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 130; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<TimeTick> m_target;
        #endregion
    }
    internal sealed class Template_15 : TraceEvent
    {
        public Address hwnd { get { return GetAddressAt(0); } }
        public int hr { get { return GetInt32At(HostOffset(4, 1)); } }

        #region Private
        internal Template_15(Action<Template_15> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != HostOffset(8, 1)));
            Debug.Assert(!(Version > 2 && EventDataLength < HostOffset(8, 1)));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_15>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "hwnd", hwnd);
             XmlAttrib(sb, "hr", hr);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "hwnd", "hr"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return hwnd;
                case 1:
                    return hr;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4096; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_15> m_target;
        #endregion
    }
    internal sealed class Template_23 : TraceEvent
    {
        public long QPCLastPresentationTime { get { return GetInt64At(0); } }
        public long PresentationResults { get { return GetInt64At(8); } }

        #region Private
        internal Template_23(Action<Template_23> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 16));
            Debug.Assert(!(Version > 2 && EventDataLength < 16));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_23>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QPCLastPresentationTime", QPCLastPresentationTime);
             XmlAttrib(sb, "PresentationResults", PresentationResults);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QPCLastPresentationTime", "PresentationResults"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QPCLastPresentationTime;
                case 1:
                    return PresentationResults;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4098; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_23> m_target;
        #endregion
    }
    internal sealed class Template_10 : TraceEvent
    {
        public long Id { get { return GetInt64At(0); } }

        #region Private
        internal Template_10(Action<Template_10> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_10>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4098; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_10> m_target;
        #endregion
    }
    internal sealed class Template_12 : TraceEvent
    {
        public long Id { get { return GetInt64At(0); } }
        public long QPCCurrentTime { get { return GetInt64At(8); } }

        #region Private
        internal Template_12(Action<Template_12> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 16));
            Debug.Assert(!(Version > 2 && EventDataLength < 16));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_12>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "QPCCurrentTime", QPCCurrentTime);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "QPCCurrentTime"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return QPCCurrentTime;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4098; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_12> m_target;
        #endregion
    }
    internal sealed class Template_11 : TraceEvent
    {
        public long BatchSize { get { return GetInt64At(0); } }

        #region Private
        internal Template_11(Action<Template_11> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_11>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "BatchSize", BatchSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BatchSize"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return BatchSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4098; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_11> m_target;
        #endregion
    }
    internal sealed class Template_13 : TraceEvent
    {
        public int Id { get { return GetInt32At(0); } }

        #region Private
        internal Template_13(Action<Template_13> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 4));
            Debug.Assert(!(Version > 2 && EventDataLength < 4));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_13>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4098; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_13> m_target;
        #endregion
    }
    internal sealed class DispatcherMessage : TraceEvent
    {
        public DispatcherPriority Priority { get { return (DispatcherPriority)GetInt32At(0); } }
        public string Operation { get { return GetUnicodeStringAt(4); } }
        public long Id { get { return GetInt64At(SkipUnicodeString(4)); } }

        #region Private
        internal DispatcherMessage(Action<DispatcherMessage> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 3 && EventDataLength != SkipUnicodeString(4)+8));
            Debug.Assert(!(Version > 3 && EventDataLength < SkipUnicodeString(4)+8));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DispatcherMessage>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Priority", Priority);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "Id", Id);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Priority", "Operation", "Id"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Priority;
                case 1:
                    return Operation;
                case 2:
                    return Id;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 8192; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<DispatcherMessage> m_target;
        #endregion
    }
    internal sealed class Template_22 : TraceEvent
    {
        public int ContextID { get { return GetInt32At(0); } }
        public int ResponseID { get { return GetInt32At(4); } }

        #region Private
        internal Template_22(Action<Template_22> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_22>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextID", ContextID);
             XmlAttrib(sb, "ResponseID", ResponseID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextID", "ResponseID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextID;
                case 1:
                    return ResponseID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4098; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_22> m_target;
        #endregion
    }
    internal sealed class PerfElementInfo : TraceEvent
    {
        public long Id { get { return GetInt64At(0); } }
        public string Type { get { return GetUnicodeStringAt(8); } }
        public string Data { get { return GetUnicodeStringAt(SkipUnicodeString(8)); } }
        public long AssemblyID { get { return GetInt64At(SkipUnicodeString(SkipUnicodeString(8))); } }

        #region Private
        internal PerfElementInfo(Action<PerfElementInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(8))+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(8))+8));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PerfElementInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "Type", Type);
             XmlAttrib(sb, "Data", Data);
             XmlAttrib(sb, "AssemblyID", AssemblyID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "Type", "Data", "AssemblyID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return Type;
                case 2:
                    return Data;
                case 3:
                    return AssemblyID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<PerfElementInfo> m_target;
        #endregion
    }
    internal sealed class PerfElementName : TraceEvent
    {
        public long Id { get { return GetInt64At(0); } }
        public string Type { get { return GetUnicodeStringAt(8); } }
        public string Name { get { return GetUnicodeStringAt(SkipUnicodeString(8)); } }

        #region Private
        internal PerfElementName(Action<PerfElementName> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(8))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(8))));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PerfElementName>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "Type", Type);
             XmlAttrib(sb, "Name", Name);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "Type", "Name"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return Type;
                case 2:
                    return Name;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<PerfElementName> m_target;
        #endregion
    }
    internal sealed class Template_51 : TraceEvent
    {
        public int Direct { get { return GetByteAt(0); } }

        #region Private
        internal Template_51(Action<Template_51> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 1));
            Debug.Assert(!(Version > 2 && EventDataLength < 1));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_51>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Direct", Direct);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Direct"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Direct;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1026; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_51> m_target;
        #endregion
    }
    internal sealed class Template_55 : TraceEvent
    {
        public int Bytes { get { return GetInt32At(0); } }
        public int Total { get { return GetInt32At(4); } }

        #region Private
        internal Template_55(Action<Template_55> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_55>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Bytes", Bytes);
             XmlAttrib(sb, "Total", Total);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Bytes", "Total"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Bytes;
                case 1:
                    return Total;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1026; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_55> m_target;
        #endregion
    }
    internal sealed class Template_54 : TraceEvent
    {
        public string Page { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal Template_54(Action<Template_54> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(0)));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_54>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Page", Page);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Page"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Page;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1024; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_54> m_target;
        #endregion
    }
    internal sealed class Template_50 : TraceEvent
    {
        public int ExitCode { get { return GetInt32At(0); } }

        #region Private
        internal Template_50(Action<Template_50> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 4));
            Debug.Assert(!(Version > 2 && EventDataLength < 4));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_50>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ExitCode", ExitCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ExitCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ExitCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1026; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_50> m_target;
        #endregion
    }
    internal sealed class Template_49 : TraceEvent
    {
        public string Path { get { return GetUnicodeStringAt(0); } }
        public string AppId { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal Template_49(Action<Template_49> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_49>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Path", Path);
             XmlAttrib(sb, "AppId", AppId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Path", "AppId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Path;
                case 1:
                    return AppId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1026; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_49> m_target;
        #endregion
    }
    internal sealed class Template_45 : TraceEvent
    {
        public string Location { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal Template_45(Action<Template_45> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(0)));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_45>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Location", Location);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Location"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Location;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1026; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_45> m_target;
        #endregion
    }
    internal sealed class Template_44 : TraceEvent
    {
        public int Code { get { return GetInt32At(0); } }
        public string Text { get { return GetUnicodeStringAt(4); } }

        #region Private
        internal Template_44(Action<Template_44> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(4)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(4)));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_44>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Code", Code);
             XmlAttrib(sb, "Text", Text);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Code", "Text"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Code;
                case 1:
                    return Text;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1026; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_44> m_target;
        #endregion
    }
    internal sealed class Template_43 : TraceEvent
    {
        public string URL { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal Template_43(Action<Template_43> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(0)));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_43>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "URL", URL);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "URL"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return URL;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1026; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_43> m_target;
        #endregion
    }
    internal sealed class Template_HR : TraceEvent
    {
        public int ReturnCode { get { return GetInt32At(0); } }

        #region Private
        internal Template_HR(Action<Template_HR> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 4));
            Debug.Assert(!(Version > 2 && EventDataLength < 4));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_HR>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ReturnCode", ReturnCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ReturnCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ReturnCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1026; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_HR> m_target;
        #endregion
    }
    internal sealed class Template_47 : TraceEvent
    {
        public int GUID_Data1 { get { return GetInt32At(0); } }
        public int CmdId { get { return GetInt32At(4); } }

        #region Private
        internal Template_47(Action<Template_47> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_47>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "GUID_Data1", GUID_Data1);
             XmlAttrib(sb, "CmdId", CmdId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GUID_Data1", "CmdId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GUID_Data1;
                case 1:
                    return CmdId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1026; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_47> m_target;
        #endregion
    }
    internal sealed class Template_48 : TraceEvent
    {
        public int CmdFlags { get { return GetInt32At(0); } }
        public int HResult { get { return GetInt32At(4); } }

        #region Private
        internal Template_48(Action<Template_48> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_48>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CmdFlags", CmdFlags);
             XmlAttrib(sb, "HResult", HResult);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CmdFlags", "HResult"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CmdFlags;
                case 1:
                    return HResult;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1024; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_48> m_target;
        #endregion
    }
    internal sealed class Template_46 : TraceEvent
    {
        public int State { get { return GetInt32At(0); } }

        #region Private
        internal Template_46(Action<Template_46> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 4));
            Debug.Assert(!(Version > 2 && EventDataLength < 4));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_46>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "State", State);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "State"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return State;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1026; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_46> m_target;
        #endregion
    }
    internal sealed class Template_53 : TraceEvent
    {
        public int AttemptDownload { get { return GetByteAt(0); } }

        #region Private
        internal Template_53(Action<Template_53> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected internal override void Dispatch()
        {
            m_target(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 1));
            Debug.Assert(!(Version > 2 && EventDataLength < 1));
        }
        protected internal override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Template_53>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AttemptDownload", AttemptDownload);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AttemptDownload"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AttemptDownload;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1026; }
        public static string GetProviderName() { return "Microsoft-Windows-WPF"; }
        public static Guid GetProviderGuid() { return new Guid("e13b77a8-14b6-11de-8069-001b212b5009"); }
        private event Action<Template_53> m_target;
        #endregion
    }
    public enum DispatcherPriority
    {
        Inactive = 0x0,
        SystemIdle = 0x1,
        ApplicationIdle = 0x2,
        ContextIdle = 0x3,
        Background = 0x4,
        Input = 0x5,
        Loaded = 0x6,
        Render = 0x7,
        DataBind = 0x8,
        Normal = 0x9,
        Send = 0xa,
    }
    public enum IntermediateRenderTargetReason
    {
        Clip = 0x0,
        Clip_and_Opacity = 0x1,
        Effect = 0x2,
        Opacity = 0x3,
        OpacityMask = 0x4,
        OpacityMask_Brush_Realization = 0x5,
        ShaderEffect_Input = 0x6,
        Software_Only_Effects = 0x7,
        TileBrush = 0x8,
    }
    public enum LayoutSource
    {
        LayoutManager = 0x0,
        HwndSource_SetLayoutSize = 0x1,
        HwndSource_WM_SIZE = 0x2,
    }
    public enum UnexptectedSWFallbackReason
    {
        NoHardwareAvailable = 0x0,
        ResizeFailed = 0x1,
        OutOfVideoMemory = 0x2,
        UnexpectedPrimitiveFallback = 0x3,
    }
}










